
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000135c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007c  00800060  0000135c  000013f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000dc  008000dc  0000146c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002326  00000000  00000000  00001748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eaa  00000000  00000000  00003a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000161c  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  00005f34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076d  00000000  00000000  00006420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014d5  00000000  00000000  00006b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00008062  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 05 	call	0xa5c	; 0xa5c <main>
      8a:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_init>:
#include "Regesters.h"


void ADC_init(void)
{
    ADMUX|=(u8)((u8)1<<REFS0);
      92:	87 b1       	in	r24, 0x07	; 7
      94:	80 64       	ori	r24, 0x40	; 64
      96:	87 b9       	out	0x07, r24	; 7
    ADCSRA|=(u8)((u8)1<<ADEN);
      98:	86 b1       	in	r24, 0x06	; 6
      9a:	80 68       	ori	r24, 0x80	; 128
      9c:	86 b9       	out	0x06, r24	; 6
    /* adjust ADC clock*/
    ADCSRA|=(u8)((u8)1<<ADPS2);
      9e:	86 b1       	in	r24, 0x06	; 6
      a0:	84 60       	ori	r24, 0x04	; 4
      a2:	86 b9       	out	0x06, r24	; 6
    ADCSRA|=(u8)((u8)1<<ADPS1);
      a4:	86 b1       	in	r24, 0x06	; 6
      a6:	82 60       	ori	r24, 0x02	; 2
      a8:	86 b9       	out	0x06, r24	; 6


    ADCSRA|=(u8)((u8)1<<ADATE);
      aa:	86 b1       	in	r24, 0x06	; 6
      ac:	80 62       	ori	r24, 0x20	; 32
      ae:	86 b9       	out	0x06, r24	; 6
    SFIOR |= (u8)((u8)1<<ADTS2);
      b0:	80 b7       	in	r24, 0x30	; 48
      b2:	80 68       	ori	r24, 0x80	; 128
      b4:	80 bf       	out	0x30, r24	; 48
    SFIOR |= (u8)((u8)1<<ADTS1);
      b6:	80 b7       	in	r24, 0x30	; 48
      b8:	80 64       	ori	r24, 0x40	; 64
      ba:	80 bf       	out	0x30, r24	; 48
    SFIOR &=(u8)(~(u8)((u8)1<<ADTS0));
      bc:	80 b7       	in	r24, 0x30	; 48
      be:	8f 7d       	andi	r24, 0xDF	; 223
      c0:	80 bf       	out	0x30, r24	; 48
      c2:	08 95       	ret

000000c4 <ADC_voff>:
}
void ADC_voff(void)
{
    ADMUX &= (u8)(~(u8)((u8)1<<REFS0));
      c4:	87 b1       	in	r24, 0x07	; 7
      c6:	8f 7b       	andi	r24, 0xBF	; 191
      c8:	87 b9       	out	0x07, r24	; 7
    ADCSRA &= (u8)(~(u8)((u8)1<<ADEN));
      ca:	86 b1       	in	r24, 0x06	; 6
      cc:	8f 77       	andi	r24, 0x7F	; 127
      ce:	86 b9       	out	0x06, r24	; 6
    /* adjust ADC clock*/
    ADCSRA &= (u8)(~(u8)((u8)1<<ADPS2));
      d0:	86 b1       	in	r24, 0x06	; 6
      d2:	8b 7f       	andi	r24, 0xFB	; 251
      d4:	86 b9       	out	0x06, r24	; 6
    ADCSRA &= (u8)(~(u8)((u8)1<<ADPS1));
      d6:	86 b1       	in	r24, 0x06	; 6
      d8:	8d 7f       	andi	r24, 0xFD	; 253
      da:	86 b9       	out	0x06, r24	; 6


    ADCSRA &=(u8)(~(u8)((u8)1<<ADATE));
      dc:	86 b1       	in	r24, 0x06	; 6
      de:	8f 7d       	andi	r24, 0xDF	; 223
      e0:	86 b9       	out	0x06, r24	; 6
    SFIOR &= (u8)(~(u8)((u8)1<<ADTS2));
      e2:	80 b7       	in	r24, 0x30	; 48
      e4:	8f 77       	andi	r24, 0x7F	; 127
      e6:	80 bf       	out	0x30, r24	; 48
    SFIOR &= (u8)(~(u8)((u8)1<<ADTS1));
      e8:	80 b7       	in	r24, 0x30	; 48
      ea:	8f 7b       	andi	r24, 0xBF	; 191
      ec:	80 bf       	out	0x30, r24	; 48
    SFIOR &= (u8)(~(u8)((u8)1<<ADTS0));
      ee:	80 b7       	in	r24, 0x30	; 48
      f0:	8f 7d       	andi	r24, 0xDF	; 223
      f2:	80 bf       	out	0x30, r24	; 48
      f4:	08 95       	ret

000000f6 <ADC_float32_tRead>:
}

float32_t ADC_float32_tRead(void)
{
      f6:	cf 92       	push	r12
      f8:	df 92       	push	r13
      fa:	ef 92       	push	r14
      fc:	ff 92       	push	r15
    u16 read_val;
    ADCSRA |= (u8)((u8)1<<ADSC);
      fe:	86 b1       	in	r24, 0x06	; 6
     100:	80 64       	ori	r24, 0x40	; 64
     102:	86 b9       	out	0x06, r24	; 6

    while( ((u8)( (u8)(ADCSRA & (u8)( (u8)1 << ADIF) ) >> ADIF)) == (u8) 0 ){
     104:	34 9b       	sbis	0x06, 4	; 6
     106:	fe cf       	rjmp	.-4      	; 0x104 <ADC_float32_tRead+0xe>

    }
    ADCSRA|=(u8)((u8)1<<ADIF);
     108:	86 b1       	in	r24, 0x06	; 6
     10a:	80 61       	ori	r24, 0x10	; 16
     10c:	86 b9       	out	0x06, r24	; 6

    read_val= (u16) ADCL;/*Justification for 10.3 it will read the value from two regesters and ouput it in 1 variable with type u16*/
     10e:	84 b1       	in	r24, 0x04	; 4
    read_val|= (u16) ((u16)ADCH << 8);/*Justification for 10.3 it will read the value from two regesters and ouput it in 1 variable with type u16*/
     110:	65 b1       	in	r22, 0x05	; 5
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	76 2f       	mov	r23, r22
     116:	66 27       	eor	r22, r22
     118:	68 2b       	or	r22, r24

    float32_t volt = (float32_t)read_val /(float32_t)22;
     11a:	80 e0       	ldi	r24, 0x00	; 0
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatunsisf>
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 eb       	ldi	r20, 0xB0	; 176
     128:	51 e4       	ldi	r21, 0x41	; 65
     12a:	0e 94 e7 07 	call	0xfce	; 0xfce <__divsf3>
     12e:	6b 01       	movw	r12, r22
     130:	7c 01       	movw	r14, r24
    if (volt >(float32_t)5)
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	40 ea       	ldi	r20, 0xA0	; 160
     138:	50 e4       	ldi	r21, 0x40	; 64
     13a:	0e 94 16 09 	call	0x122c	; 0x122c <__gesf2>
     13e:	18 16       	cp	r1, r24
     140:	44 f4       	brge	.+16     	; 0x152 <ADC_float32_tRead+0x5c>
    {
        volt=(float32_t)5;
     142:	0f 2e       	mov	r0, r31
     144:	c1 2c       	mov	r12, r1
     146:	d1 2c       	mov	r13, r1
     148:	f0 ea       	ldi	r31, 0xA0	; 160
     14a:	ef 2e       	mov	r14, r31
     14c:	f0 e4       	ldi	r31, 0x40	; 64
     14e:	ff 2e       	mov	r15, r31
     150:	f0 2d       	mov	r31, r0
    }
    return volt ;
}
     152:	c7 01       	movw	r24, r14
     154:	b6 01       	movw	r22, r12
     156:	ff 90       	pop	r15
     158:	ef 90       	pop	r14
     15a:	df 90       	pop	r13
     15c:	cf 90       	pop	r12
     15e:	08 95       	ret

00000160 <DIO_set_bit_dir>:
		break;
		default :
		break;
	}
	return data;
}
     160:	81 30       	cpi	r24, 0x01	; 1
     162:	01 f1       	breq	.+64     	; 0x1a4 <DIO_set_bit_dir+0x44>
     164:	30 f0       	brcs	.+12     	; 0x172 <DIO_set_bit_dir+0x12>
     166:	82 30       	cpi	r24, 0x02	; 2
     168:	b1 f1       	breq	.+108    	; 0x1d6 <DIO_set_bit_dir+0x76>
     16a:	83 30       	cpi	r24, 0x03	; 3
     16c:	09 f4       	brne	.+2      	; 0x170 <DIO_set_bit_dir+0x10>
     16e:	4c c0       	rjmp	.+152    	; 0x208 <DIO_set_bit_dir+0xa8>
     170:	08 95       	ret
     172:	41 30       	cpi	r20, 0x01	; 1
     174:	59 f4       	brne	.+22     	; 0x18c <DIO_set_bit_dir+0x2c>
     176:	2a b3       	in	r18, 0x1a	; 26
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_set_bit_dir+0x22>
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	6a 95       	dec	r22
     184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_set_bit_dir+0x1e>
     186:	82 2b       	or	r24, r18
     188:	8a bb       	out	0x1a, r24	; 26
     18a:	08 95       	ret
     18c:	2a b3       	in	r18, 0x1a	; 26
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_set_bit_dir+0x38>
     194:	88 0f       	add	r24, r24
     196:	99 1f       	adc	r25, r25
     198:	6a 95       	dec	r22
     19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_set_bit_dir+0x34>
     19c:	80 95       	com	r24
     19e:	82 23       	and	r24, r18
     1a0:	8a bb       	out	0x1a, r24	; 26
     1a2:	08 95       	ret
     1a4:	41 30       	cpi	r20, 0x01	; 1
     1a6:	59 f4       	brne	.+22     	; 0x1be <DIO_set_bit_dir+0x5e>
     1a8:	27 b3       	in	r18, 0x17	; 23
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_set_bit_dir+0x54>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	6a 95       	dec	r22
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_set_bit_dir+0x50>
     1b8:	82 2b       	or	r24, r18
     1ba:	87 bb       	out	0x17, r24	; 23
     1bc:	08 95       	ret
     1be:	27 b3       	in	r18, 0x17	; 23
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <DIO_set_bit_dir+0x6a>
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	6a 95       	dec	r22
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <DIO_set_bit_dir+0x66>
     1ce:	80 95       	com	r24
     1d0:	82 23       	and	r24, r18
     1d2:	87 bb       	out	0x17, r24	; 23
     1d4:	08 95       	ret
     1d6:	41 30       	cpi	r20, 0x01	; 1
     1d8:	59 f4       	brne	.+22     	; 0x1f0 <DIO_set_bit_dir+0x90>
     1da:	24 b3       	in	r18, 0x14	; 20
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_set_bit_dir+0x86>
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	6a 95       	dec	r22
     1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_set_bit_dir+0x82>
     1ea:	82 2b       	or	r24, r18
     1ec:	84 bb       	out	0x14, r24	; 20
     1ee:	08 95       	ret
     1f0:	24 b3       	in	r18, 0x14	; 20
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_set_bit_dir+0x9c>
     1f8:	88 0f       	add	r24, r24
     1fa:	99 1f       	adc	r25, r25
     1fc:	6a 95       	dec	r22
     1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_set_bit_dir+0x98>
     200:	80 95       	com	r24
     202:	82 23       	and	r24, r18
     204:	84 bb       	out	0x14, r24	; 20
     206:	08 95       	ret
     208:	41 30       	cpi	r20, 0x01	; 1
     20a:	59 f4       	brne	.+22     	; 0x222 <DIO_set_bit_dir+0xc2>
     20c:	21 b3       	in	r18, 0x11	; 17
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_set_bit_dir+0xb8>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	6a 95       	dec	r22
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_set_bit_dir+0xb4>
     21c:	82 2b       	or	r24, r18
     21e:	81 bb       	out	0x11, r24	; 17
     220:	08 95       	ret
     222:	21 b3       	in	r18, 0x11	; 17
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	02 c0       	rjmp	.+4      	; 0x22e <DIO_set_bit_dir+0xce>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	6a 95       	dec	r22
     230:	e2 f7       	brpl	.-8      	; 0x22a <DIO_set_bit_dir+0xca>
     232:	80 95       	com	r24
     234:	82 23       	and	r24, r18
     236:	81 bb       	out	0x11, r24	; 17
     238:	08 95       	ret

0000023a <DIO_read_bit>:
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	c9 f0       	breq	.+50     	; 0x270 <DIO_read_bit+0x36>
     23e:	28 f0       	brcs	.+10     	; 0x24a <DIO_read_bit+0x10>
     240:	82 30       	cpi	r24, 0x02	; 2
     242:	49 f1       	breq	.+82     	; 0x296 <DIO_read_bit+0x5c>
     244:	83 30       	cpi	r24, 0x03	; 3
     246:	d1 f1       	breq	.+116    	; 0x2bc <DIO_read_bit+0x82>
     248:	4b c0       	rjmp	.+150    	; 0x2e0 <DIO_read_bit+0xa6>
     24a:	29 b3       	in	r18, 0x19	; 25
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	06 2e       	mov	r0, r22
     252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_read_bit+0x1e>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_read_bit+0x1a>
     25c:	30 e0       	ldi	r19, 0x00	; 0
     25e:	82 23       	and	r24, r18
     260:	93 23       	and	r25, r19
     262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_read_bit+0x2e>
     264:	95 95       	asr	r25
     266:	87 95       	ror	r24
     268:	6a 95       	dec	r22
     26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_read_bit+0x2a>
     26c:	98 2f       	mov	r25, r24
     26e:	38 c0       	rjmp	.+112    	; 0x2e0 <DIO_read_bit+0xa6>
     270:	26 b3       	in	r18, 0x16	; 22
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	06 2e       	mov	r0, r22
     278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_read_bit+0x44>
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	0a 94       	dec	r0
     280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_read_bit+0x40>
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	82 23       	and	r24, r18
     286:	93 23       	and	r25, r19
     288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_read_bit+0x54>
     28a:	95 95       	asr	r25
     28c:	87 95       	ror	r24
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_read_bit+0x50>
     292:	98 2f       	mov	r25, r24
     294:	25 c0       	rjmp	.+74     	; 0x2e0 <DIO_read_bit+0xa6>
     296:	23 b3       	in	r18, 0x13	; 19
     298:	81 e0       	ldi	r24, 0x01	; 1
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	06 2e       	mov	r0, r22
     29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_read_bit+0x6a>
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	0a 94       	dec	r0
     2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_read_bit+0x66>
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	82 23       	and	r24, r18
     2ac:	93 23       	and	r25, r19
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_read_bit+0x7a>
     2b0:	95 95       	asr	r25
     2b2:	87 95       	ror	r24
     2b4:	6a 95       	dec	r22
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_read_bit+0x76>
     2b8:	98 2f       	mov	r25, r24
     2ba:	12 c0       	rjmp	.+36     	; 0x2e0 <DIO_read_bit+0xa6>
     2bc:	20 b3       	in	r18, 0x10	; 16
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	06 2e       	mov	r0, r22
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_read_bit+0x90>
     2c6:	88 0f       	add	r24, r24
     2c8:	99 1f       	adc	r25, r25
     2ca:	0a 94       	dec	r0
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_read_bit+0x8c>
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	82 23       	and	r24, r18
     2d2:	93 23       	and	r25, r19
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_read_bit+0xa0>
     2d6:	95 95       	asr	r25
     2d8:	87 95       	ror	r24
     2da:	6a 95       	dec	r22
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_read_bit+0x9c>
     2de:	98 2f       	mov	r25, r24
     2e0:	89 2f       	mov	r24, r25
     2e2:	08 95       	ret

000002e4 <DIO_write_bit>:
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	01 f1       	breq	.+64     	; 0x328 <DIO_write_bit+0x44>
     2e8:	30 f0       	brcs	.+12     	; 0x2f6 <DIO_write_bit+0x12>
     2ea:	82 30       	cpi	r24, 0x02	; 2
     2ec:	b1 f1       	breq	.+108    	; 0x35a <DIO_write_bit+0x76>
     2ee:	83 30       	cpi	r24, 0x03	; 3
     2f0:	09 f4       	brne	.+2      	; 0x2f4 <DIO_write_bit+0x10>
     2f2:	4c c0       	rjmp	.+152    	; 0x38c <DIO_write_bit+0xa8>
     2f4:	08 95       	ret
     2f6:	41 30       	cpi	r20, 0x01	; 1
     2f8:	59 f4       	brne	.+22     	; 0x310 <DIO_write_bit+0x2c>
     2fa:	2b b3       	in	r18, 0x1b	; 27
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_write_bit+0x22>
     302:	88 0f       	add	r24, r24
     304:	99 1f       	adc	r25, r25
     306:	6a 95       	dec	r22
     308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_write_bit+0x1e>
     30a:	82 2b       	or	r24, r18
     30c:	8b bb       	out	0x1b, r24	; 27
     30e:	08 95       	ret
     310:	2b b3       	in	r18, 0x1b	; 27
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_write_bit+0x38>
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	6a 95       	dec	r22
     31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_write_bit+0x34>
     320:	80 95       	com	r24
     322:	82 23       	and	r24, r18
     324:	8b bb       	out	0x1b, r24	; 27
     326:	08 95       	ret
     328:	41 30       	cpi	r20, 0x01	; 1
     32a:	59 f4       	brne	.+22     	; 0x342 <DIO_write_bit+0x5e>
     32c:	28 b3       	in	r18, 0x18	; 24
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_write_bit+0x54>
     334:	88 0f       	add	r24, r24
     336:	99 1f       	adc	r25, r25
     338:	6a 95       	dec	r22
     33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_write_bit+0x50>
     33c:	82 2b       	or	r24, r18
     33e:	88 bb       	out	0x18, r24	; 24
     340:	08 95       	ret
     342:	28 b3       	in	r18, 0x18	; 24
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	02 c0       	rjmp	.+4      	; 0x34e <DIO_write_bit+0x6a>
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	6a 95       	dec	r22
     350:	e2 f7       	brpl	.-8      	; 0x34a <DIO_write_bit+0x66>
     352:	80 95       	com	r24
     354:	82 23       	and	r24, r18
     356:	88 bb       	out	0x18, r24	; 24
     358:	08 95       	ret
     35a:	41 30       	cpi	r20, 0x01	; 1
     35c:	59 f4       	brne	.+22     	; 0x374 <DIO_write_bit+0x90>
     35e:	25 b3       	in	r18, 0x15	; 21
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_write_bit+0x86>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	6a 95       	dec	r22
     36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_write_bit+0x82>
     36e:	82 2b       	or	r24, r18
     370:	85 bb       	out	0x15, r24	; 21
     372:	08 95       	ret
     374:	25 b3       	in	r18, 0x15	; 21
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_write_bit+0x9c>
     37c:	88 0f       	add	r24, r24
     37e:	99 1f       	adc	r25, r25
     380:	6a 95       	dec	r22
     382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_write_bit+0x98>
     384:	80 95       	com	r24
     386:	82 23       	and	r24, r18
     388:	85 bb       	out	0x15, r24	; 21
     38a:	08 95       	ret
     38c:	41 30       	cpi	r20, 0x01	; 1
     38e:	59 f4       	brne	.+22     	; 0x3a6 <DIO_write_bit+0xc2>
     390:	22 b3       	in	r18, 0x12	; 18
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_write_bit+0xb8>
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	6a 95       	dec	r22
     39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_write_bit+0xb4>
     3a0:	82 2b       	or	r24, r18
     3a2:	82 bb       	out	0x12, r24	; 18
     3a4:	08 95       	ret
     3a6:	22 b3       	in	r18, 0x12	; 18
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_write_bit+0xce>
     3ae:	88 0f       	add	r24, r24
     3b0:	99 1f       	adc	r25, r25
     3b2:	6a 95       	dec	r22
     3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_write_bit+0xca>
     3b6:	80 95       	com	r24
     3b8:	82 23       	and	r24, r18
     3ba:	82 bb       	out	0x12, r24	; 18
     3bc:	08 95       	ret

000003be <DIO_connect_pullup>:

void DIO_connect_pullup(u8 port,u8 bit,u8 connect){
	switch(port){
     3be:	81 30       	cpi	r24, 0x01	; 1
     3c0:	01 f1       	breq	.+64     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3c2:	30 f0       	brcs	.+12     	; 0x3d0 <DIO_connect_pullup+0x12>
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	b1 f1       	breq	.+108    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     3c8:	83 30       	cpi	r24, 0x03	; 3
     3ca:	09 f4       	brne	.+2      	; 0x3ce <DIO_connect_pullup+0x10>
     3cc:	4c c0       	rjmp	.+152    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     3ce:	08 95       	ret
		case (u8) 0:
		if (connect==(u8) 1){
     3d0:	41 30       	cpi	r20, 0x01	; 1
     3d2:	59 f4       	brne	.+22     	; 0x3ea <DIO_connect_pullup+0x2c>
			PORTA |=  (u8)( (u8)1 << bit)  ;
     3d4:	2b b3       	in	r18, 0x1b	; 27
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_connect_pullup+0x22>
     3dc:	88 0f       	add	r24, r24
     3de:	99 1f       	adc	r25, r25
     3e0:	6a 95       	dec	r22
     3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_connect_pullup+0x1e>
     3e4:	82 2b       	or	r24, r18
     3e6:	8b bb       	out	0x1b, r24	; 27
     3e8:	08 95       	ret
		}
		else{
			PORTA &= (u8)(~(u8)((u8)1 << bit ) ) ;
     3ea:	2b b3       	in	r18, 0x1b	; 27
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <DIO_connect_pullup+0x38>
     3f2:	88 0f       	add	r24, r24
     3f4:	99 1f       	adc	r25, r25
     3f6:	6a 95       	dec	r22
     3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <DIO_connect_pullup+0x34>
     3fa:	80 95       	com	r24
     3fc:	82 23       	and	r24, r18
     3fe:	8b bb       	out	0x1b, r24	; 27
     400:	08 95       	ret
		}
		break;
		case (u8) 1:
		if (connect==(u8)1){
     402:	41 30       	cpi	r20, 0x01	; 1
     404:	59 f4       	brne	.+22     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			PORTB |=  (u8)( (u8)1 << bit)  ;
     406:	28 b3       	in	r18, 0x18	; 24
     408:	81 e0       	ldi	r24, 0x01	; 1
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	6a 95       	dec	r22
     414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     416:	82 2b       	or	r24, r18
     418:	88 bb       	out	0x18, r24	; 24
     41a:	08 95       	ret
		}
		else{
			PORTB &= (u8)(~(u8)((u8)1 << bit ) ) ;
     41c:	28 b3       	in	r18, 0x18	; 24
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     424:	88 0f       	add	r24, r24
     426:	99 1f       	adc	r25, r25
     428:	6a 95       	dec	r22
     42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     42c:	80 95       	com	r24
     42e:	82 23       	and	r24, r18
     430:	88 bb       	out	0x18, r24	; 24
     432:	08 95       	ret
		}
		break;
		case (u8) 2:
		if (connect==(u8) 1){
     434:	41 30       	cpi	r20, 0x01	; 1
     436:	59 f4       	brne	.+22     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			PORTC |=  (u8)( (u8)1 << bit)  ;
     438:	25 b3       	in	r18, 0x15	; 21
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	6a 95       	dec	r22
     446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
     448:	82 2b       	or	r24, r18
     44a:	85 bb       	out	0x15, r24	; 21
     44c:	08 95       	ret
		}
		else{
			PORTC &= (u8)(~(u8)((u8)1 << bit ) );
     44e:	25 b3       	in	r18, 0x15	; 21
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	6a 95       	dec	r22
     45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     45e:	80 95       	com	r24
     460:	82 23       	and	r24, r18
     462:	85 bb       	out	0x15, r24	; 21
     464:	08 95       	ret
		}
		break;
		case (u8) 3:
		if (connect==(u8) 1){
     466:	41 30       	cpi	r20, 0x01	; 1
     468:	59 f4       	brne	.+22     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			PORTD |=  (u8)( (u8)1 << bit)  ;
     46a:	22 b3       	in	r18, 0x12	; 18
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	6a 95       	dec	r22
     478:	e2 f7       	brpl	.-8      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     47a:	82 2b       	or	r24, r18
     47c:	82 bb       	out	0x12, r24	; 18
     47e:	08 95       	ret
		}
		else{
			PORTD &= (u8)(~(u8)((u8)1 << bit ) ) ;
     480:	22 b3       	in	r18, 0x12	; 18
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	6a 95       	dec	r22
     48e:	e2 f7       	brpl	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     490:	80 95       	com	r24
     492:	82 23       	and	r24, r18
     494:	82 bb       	out	0x12, r24	; 18
     496:	08 95       	ret

00000498 <display_welcome>:
#include "display_manager.h"
#include "Basic_Types.h"
#include "Regesters.h"

void display_welcome(void)
{
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
	lcd_init();
     49c:	0e 94 d5 04 	call	0x9aa	; 0x9aa <lcd_init>
	u8 i = 0;
	u8 counter = 0;
	for (counter = (u8)0; counter < (u8)3; counter++)
     4a0:	d0 e0       	ldi	r29, 0x00	; 0
     4a2:	39 c0       	rjmp	.+114    	; 0x516 <display_welcome+0x7e>
	{
		for(i = (u8)10; i > (u8)0; i--)
		{
			lcdCommand((u8)0x01);
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4aa:	83 ef       	ldi	r24, 0xF3	; 243
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	01 97       	sbiw	r24, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <display_welcome+0x16>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <display_welcome+0x1c>
     4b4:	00 00       	nop
			_delay_ms(2);
			lcd_gotoxy((u8)i, (u8)1);
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	8c 2f       	mov	r24, r28
     4ba:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_gotoxy>
			lcd_print("WELCOME");
     4be:	82 e7       	ldi	r24, 0x72	; 114
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
     4c6:	87 ea       	ldi	r24, 0xA7	; 167
     4c8:	91 e6       	ldi	r25, 0x61	; 97
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <display_welcome+0x32>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <display_welcome+0x38>
     4d0:	00 00       	nop
	lcd_init();
	u8 i = 0;
	u8 counter = 0;
	for (counter = (u8)0; counter < (u8)3; counter++)
	{
		for(i = (u8)10; i > (u8)0; i--)
     4d2:	c1 50       	subi	r28, 0x01	; 1
     4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <display_welcome+0x40>
     4d6:	ca e0       	ldi	r28, 0x0A	; 10
     4d8:	c1 11       	cpse	r28, r1
     4da:	e4 cf       	rjmp	.-56     	; 0x4a4 <display_welcome+0xc>
     4dc:	c1 e0       	ldi	r28, 0x01	; 1
     4de:	18 c0       	rjmp	.+48     	; 0x510 <display_welcome+0x78>
			lcd_print("WELCOME");
			_delay_ms(100);
		}
		for(i = (u8)1; i < (u8)11; i++)
		{
			lcdCommand((u8)0x01);
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
     4e6:	83 ef       	ldi	r24, 0xF3	; 243
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <display_welcome+0x52>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <display_welcome+0x58>
     4f0:	00 00       	nop
			_delay_ms(2);
			lcd_gotoxy((u8)i, (u8)1);
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	8c 2f       	mov	r24, r28
     4f6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_gotoxy>
			lcd_print("WELCOME");
     4fa:	82 e7       	ldi	r24, 0x72	; 114
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
     502:	87 ea       	ldi	r24, 0xA7	; 167
     504:	91 e6       	ldi	r25, 0x61	; 97
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <display_welcome+0x6e>
     50a:	00 c0       	rjmp	.+0      	; 0x50c <display_welcome+0x74>
     50c:	00 00       	nop
			_delay_ms(2);
			lcd_gotoxy((u8)i, (u8)1);
			lcd_print("WELCOME");
			_delay_ms(100);
		}
		for(i = (u8)1; i < (u8)11; i++)
     50e:	cf 5f       	subi	r28, 0xFF	; 255
     510:	cb 30       	cpi	r28, 0x0B	; 11
     512:	30 f3       	brcs	.-52     	; 0x4e0 <display_welcome+0x48>
void display_welcome(void)
{
	lcd_init();
	u8 i = 0;
	u8 counter = 0;
	for (counter = (u8)0; counter < (u8)3; counter++)
     514:	df 5f       	subi	r29, 0xFF	; 255
     516:	d3 30       	cpi	r29, 0x03	; 3
     518:	f0 f2       	brcs	.-68     	; 0x4d6 <display_welcome+0x3e>
			lcd_gotoxy((u8)i, (u8)1);
			lcd_print("WELCOME");
			_delay_ms(100);
		}
	}
}
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <display_state>:

void display_state(u8 setTemperature, u8 currentTemperature, u8 state)
{
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	08 2f       	mov	r16, r24
     52c:	f6 2e       	mov	r15, r22
     52e:	14 2f       	mov	r17, r20
	lcdCommand((u8)0x01);
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
     536:	83 ef       	ldi	r24, 0xF3	; 243
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <display_state+0x1a>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <display_state+0x20>
     540:	00 00       	nop
	_delay_ms(2);
	lcd_gotoxy((u8)1, (u8)1);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_gotoxy>
	lcd_print("SET:");
     54a:	8a e7       	ldi	r24, 0x7A	; 122
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
	lcdData((setTemperature/(u8)10)+(u8)48);
     552:	cd ec       	ldi	r28, 0xCD	; 205
     554:	0c 9f       	mul	r16, r28
     556:	d1 2d       	mov	r29, r1
     558:	11 24       	eor	r1, r1
     55a:	d6 95       	lsr	r29
     55c:	d6 95       	lsr	r29
     55e:	d6 95       	lsr	r29
     560:	80 e3       	ldi	r24, 0x30	; 48
     562:	8d 0f       	add	r24, r29
     564:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
	lcdData((setTemperature%(u8)10)+(u8)48);
     568:	dd 0f       	add	r29, r29
     56a:	8d 2f       	mov	r24, r29
     56c:	88 0f       	add	r24, r24
     56e:	88 0f       	add	r24, r24
     570:	d8 0f       	add	r29, r24
     572:	80 2f       	mov	r24, r16
     574:	8d 1b       	sub	r24, r29
     576:	80 5d       	subi	r24, 0xD0	; 208
     578:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
	lcd_gotoxy((u8)10, (u8)1);
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	8a e0       	ldi	r24, 0x0A	; 10
     580:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_gotoxy>
	lcd_print("CRT:");
     584:	8f e7       	ldi	r24, 0x7F	; 127
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
	lcdData((currentTemperature/(u8)10)+(u8)48);
     58c:	fc 9e       	mul	r15, r28
     58e:	c1 2d       	mov	r28, r1
     590:	11 24       	eor	r1, r1
     592:	c6 95       	lsr	r28
     594:	c6 95       	lsr	r28
     596:	c6 95       	lsr	r28
     598:	80 e3       	ldi	r24, 0x30	; 48
     59a:	8c 0f       	add	r24, r28
     59c:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
	lcdData((currentTemperature%(u8)10)+(u8)48);
     5a0:	cc 0f       	add	r28, r28
     5a2:	8c 2f       	mov	r24, r28
     5a4:	88 0f       	add	r24, r24
     5a6:	88 0f       	add	r24, r24
     5a8:	c8 0f       	add	r28, r24
     5aa:	8f 2d       	mov	r24, r15
     5ac:	8c 1b       	sub	r24, r28
     5ae:	80 5d       	subi	r24, 0xD0	; 208
     5b0:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
	lcd_gotoxy((u8)1, (u8)2);
     5b4:	62 e0       	ldi	r22, 0x02	; 2
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_gotoxy>
	lcd_print("STATE:");
     5bc:	84 e8       	ldi	r24, 0x84	; 132
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
	switch(state){
     5c4:	13 30       	cpi	r17, 0x03	; 3
     5c6:	a9 f0       	breq	.+42     	; 0x5f2 <display_state+0xd2>
     5c8:	28 f4       	brcc	.+10     	; 0x5d4 <display_state+0xb4>
     5ca:	11 30       	cpi	r17, 0x01	; 1
     5cc:	41 f0       	breq	.+16     	; 0x5de <display_state+0xbe>
     5ce:	12 30       	cpi	r17, 0x02	; 2
     5d0:	59 f0       	breq	.+22     	; 0x5e8 <display_state+0xc8>
     5d2:	1e c0       	rjmp	.+60     	; 0x610 <display_state+0xf0>
     5d4:	14 30       	cpi	r17, 0x04	; 4
     5d6:	91 f0       	breq	.+36     	; 0x5fc <display_state+0xdc>
     5d8:	15 30       	cpi	r17, 0x05	; 5
     5da:	a9 f0       	breq	.+42     	; 0x606 <display_state+0xe6>
     5dc:	19 c0       	rjmp	.+50     	; 0x610 <display_state+0xf0>
		case (u8)1:
		lcd_print("STANDBY");
     5de:	8b e8       	ldi	r24, 0x8B	; 139
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     5e6:	18 c0       	rjmp	.+48     	; 0x618 <display_state+0xf8>
		case (u8)2:
		lcd_print("OPERATION");
     5e8:	83 e9       	ldi	r24, 0x93	; 147
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     5f0:	13 c0       	rjmp	.+38     	; 0x618 <display_state+0xf8>
		case (u8)3:
		lcd_print("NORMAL");
     5f2:	8d e9       	ldi	r24, 0x9D	; 157
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     5fa:	0e c0       	rjmp	.+28     	; 0x618 <display_state+0xf8>
		case (u8)4:
		lcd_print("ERROR");
     5fc:	84 ea       	ldi	r24, 0xA4	; 164
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     604:	09 c0       	rjmp	.+18     	; 0x618 <display_state+0xf8>
		case (u8)5:
		lcd_print("SET_TEMP");
     606:	8a ea       	ldi	r24, 0xAA	; 170
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     60e:	04 c0       	rjmp	.+8      	; 0x618 <display_state+0xf8>
		default:
		lcd_print("ERROR");
     610:	84 ea       	ldi	r24, 0xA4	; 164
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
	}
}
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	08 95       	ret

00000624 <update_set>:

void update_set(u8 setTemp)
{
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
     628:	d8 2f       	mov	r29, r24

	lcd_gotoxy((u8)5, (u8)1);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	85 e0       	ldi	r24, 0x05	; 5
     62e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_gotoxy>
	lcdData((setTemp/(u8)10) + (u8)48);
     632:	cd ec       	ldi	r28, 0xCD	; 205
     634:	dc 9f       	mul	r29, r28
     636:	c1 2d       	mov	r28, r1
     638:	11 24       	eor	r1, r1
     63a:	c6 95       	lsr	r28
     63c:	c6 95       	lsr	r28
     63e:	c6 95       	lsr	r28
     640:	80 e3       	ldi	r24, 0x30	; 48
     642:	8c 0f       	add	r24, r28
     644:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
	lcdData((setTemp%(u8)10) + (u8)48);
     648:	cc 0f       	add	r28, r28
     64a:	8c 2f       	mov	r24, r28
     64c:	88 0f       	add	r24, r24
     64e:	88 0f       	add	r24, r24
     650:	c8 0f       	add	r28, r24
     652:	8d 2f       	mov	r24, r29
     654:	8c 1b       	sub	r24, r28
     656:	80 5d       	subi	r24, 0xD0	; 208
     658:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
}
     65c:	df 91       	pop	r29
     65e:	cf 91       	pop	r28
     660:	08 95       	ret

00000662 <update_current>:

void update_current(u8 currentTemp)
{
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	d8 2f       	mov	r29, r24
	lcd_gotoxy((u8)14, (u8)1);
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	8e e0       	ldi	r24, 0x0E	; 14
     66c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_gotoxy>
	lcdData((currentTemp/(u8)10) + (u8)48);
     670:	cd ec       	ldi	r28, 0xCD	; 205
     672:	dc 9f       	mul	r29, r28
     674:	c1 2d       	mov	r28, r1
     676:	11 24       	eor	r1, r1
     678:	c6 95       	lsr	r28
     67a:	c6 95       	lsr	r28
     67c:	c6 95       	lsr	r28
     67e:	80 e3       	ldi	r24, 0x30	; 48
     680:	8c 0f       	add	r24, r28
     682:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
	lcdData((currentTemp %(u8)10) + (u8)48);
     686:	cc 0f       	add	r28, r28
     688:	8c 2f       	mov	r24, r28
     68a:	88 0f       	add	r24, r24
     68c:	88 0f       	add	r24, r24
     68e:	c8 0f       	add	r28, r24
     690:	8d 2f       	mov	r24, r29
     692:	8c 1b       	sub	r24, r28
     694:	80 5d       	subi	r24, 0xD0	; 208
     696:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
}
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <update_state>:

void update_state(u8 state)
{
     6a0:	cf 93       	push	r28
     6a2:	c8 2f       	mov	r28, r24
	lcd_gotoxy((u8) 7, (u8) 2);
     6a4:	62 e0       	ldi	r22, 0x02	; 2
     6a6:	87 e0       	ldi	r24, 0x07	; 7
     6a8:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <lcd_gotoxy>
	switch(state){
     6ac:	c3 30       	cpi	r28, 0x03	; 3
     6ae:	a9 f0       	breq	.+42     	; 0x6da <update_state+0x3a>
     6b0:	28 f4       	brcc	.+10     	; 0x6bc <update_state+0x1c>
     6b2:	c1 30       	cpi	r28, 0x01	; 1
     6b4:	41 f0       	breq	.+16     	; 0x6c6 <update_state+0x26>
     6b6:	c2 30       	cpi	r28, 0x02	; 2
     6b8:	59 f0       	breq	.+22     	; 0x6d0 <update_state+0x30>
     6ba:	1e c0       	rjmp	.+60     	; 0x6f8 <update_state+0x58>
     6bc:	c4 30       	cpi	r28, 0x04	; 4
     6be:	91 f0       	breq	.+36     	; 0x6e4 <update_state+0x44>
     6c0:	c5 30       	cpi	r28, 0x05	; 5
     6c2:	a9 f0       	breq	.+42     	; 0x6ee <update_state+0x4e>
     6c4:	19 c0       	rjmp	.+50     	; 0x6f8 <update_state+0x58>
		case (u8)1:
		lcd_print("STANDBY  ");
     6c6:	83 eb       	ldi	r24, 0xB3	; 179
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     6ce:	18 c0       	rjmp	.+48     	; 0x700 <update_state+0x60>
		case (u8)2:
		lcd_print("OPERATION");
     6d0:	83 e9       	ldi	r24, 0x93	; 147
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     6d8:	13 c0       	rjmp	.+38     	; 0x700 <update_state+0x60>
		case (u8)3:
		lcd_print("NORMAL    ");
     6da:	8d eb       	ldi	r24, 0xBD	; 189
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     6e2:	0e c0       	rjmp	.+28     	; 0x700 <update_state+0x60>
		case (u8)4:
		lcd_print("ERROR    ");
     6e4:	88 ec       	ldi	r24, 0xC8	; 200
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     6ec:	09 c0       	rjmp	.+18     	; 0x700 <update_state+0x60>
		case (u8)5:
		lcd_print("SET_TEMP ");
     6ee:	82 ed       	ldi	r24, 0xD2	; 210
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <update_state+0x60>
		default:
		lcd_print("ERROR    ");
     6f8:	88 ec       	ldi	r24, 0xC8	; 200
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 1b 05 	call	0xa36	; 0xa36 <lcd_print>
		break;
	}
}
     700:	cf 91       	pop	r28
     702:	08 95       	ret

00000704 <duty_cycle_control>:
	ADC_voff();
	return volt;
}
void PwmOff(void)
{
	PWM_off();
     704:	8f 92       	push	r8
     706:	9f 92       	push	r9
     708:	af 92       	push	r10
     70a:	bf 92       	push	r11
     70c:	cf 92       	push	r12
     70e:	df 92       	push	r13
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	cf 93       	push	r28
     716:	c6 2f       	mov	r28, r22
     718:	69 01       	movw	r12, r18
     71a:	7a 01       	movw	r14, r20
     71c:	68 2f       	mov	r22, r24
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatunsisf>
     728:	4b 01       	movw	r8, r22
     72a:	5c 01       	movw	r10, r24
     72c:	6c 2f       	mov	r22, r28
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	0e 94 88 08 	call	0x1110	; 0x1110 <__floatunsisf>
     738:	9b 01       	movw	r18, r22
     73a:	ac 01       	movw	r20, r24
     73c:	c5 01       	movw	r24, r10
     73e:	b4 01       	movw	r22, r8
     740:	0e 94 7a 07 	call	0xef4	; 0xef4 <__subsf3>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	48 ec       	ldi	r20, 0xC8	; 200
     74a:	52 e4       	ldi	r21, 0x42	; 66
     74c:	0e 94 e7 07 	call	0xfce	; 0xfce <__divsf3>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	40 e2       	ldi	r20, 0x20	; 32
     756:	51 e4       	ldi	r21, 0x41	; 65
     758:	0e 94 1b 09 	call	0x1236	; 0x1236 <__mulsf3>
     75c:	4b 01       	movw	r8, r22
     75e:	5c 01       	movw	r10, r24
     760:	a7 01       	movw	r20, r14
     762:	96 01       	movw	r18, r12
     764:	c7 01       	movw	r24, r14
     766:	b6 01       	movw	r22, r12
     768:	0e 94 7b 07 	call	0xef6	; 0xef6 <__addsf3>
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	40 e2       	ldi	r20, 0x20	; 32
     772:	51 e4       	ldi	r21, 0x41	; 65
     774:	0e 94 e7 07 	call	0xfce	; 0xfce <__divsf3>
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	c5 01       	movw	r24, r10
     77e:	b4 01       	movw	r22, r8
     780:	0e 94 1b 09 	call	0x1236	; 0x1236 <__mulsf3>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	30 e0       	ldi	r19, 0x00	; 0
     788:	40 e2       	ldi	r20, 0x20	; 32
     78a:	51 e4       	ldi	r21, 0x41	; 65
     78c:	0e 94 e7 07 	call	0xfce	; 0xfce <__divsf3>
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e8       	ldi	r19, 0x80	; 128
     794:	4f e7       	ldi	r20, 0x7F	; 127
     796:	54 e4       	ldi	r21, 0x44	; 68
     798:	0e 94 1b 09 	call	0x1236	; 0x1236 <__mulsf3>
     79c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <PWM_fast>
     7a0:	cf 91       	pop	r28
     7a2:	ff 90       	pop	r15
     7a4:	ef 90       	pop	r14
     7a6:	df 90       	pop	r13
     7a8:	cf 90       	pop	r12
     7aa:	bf 90       	pop	r11
     7ac:	af 90       	pop	r10
     7ae:	9f 90       	pop	r9
     7b0:	8f 90       	pop	r8
     7b2:	08 95       	ret

000007b4 <heaterOff>:
     7b4:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <PWM_off>
     7b8:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_voff>
     7bc:	08 95       	ret

000007be <ADC_read>:
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	ff 92       	push	r15
     7c6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_init>
     7ca:	0e 94 7b 00 	call	0xf6	; 0xf6 <ADC_float32_tRead>
     7ce:	6b 01       	movw	r12, r22
     7d0:	7c 01       	movw	r14, r24
     7d2:	0e 94 62 00 	call	0xc4	; 0xc4 <ADC_voff>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b6 01       	movw	r22, r12
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	08 95       	ret

000007e4 <heaterOn>:
}
void heaterOn(void)
{
	PWM_init();
     7e4:	0e 94 d0 06 	call	0xda0	; 0xda0 <PWM_init>
     7e8:	08 95       	ret

000007ea <KEYPAD_init>:
#include "DIO.h"
#include "Basic_Types.h"
#include "Regesters.h"

void KEYPAD_init(void){
	DIO_set_bit_dir((u8) PORT, (u8) 0, (u8) 1); /*output*/
     7ea:	41 e0       	ldi	r20, 0x01	; 1
     7ec:	60 e0       	ldi	r22, 0x00	; 0
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
	DIO_set_bit_dir((u8) PORT, (u8) 1, (u8) 1); /*output*/
     7f4:	41 e0       	ldi	r20, 0x01	; 1
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
	DIO_set_bit_dir((u8) PORT, (u8) 2, (u8) 1); /*output*/
     7fe:	41 e0       	ldi	r20, 0x01	; 1
     800:	62 e0       	ldi	r22, 0x02	; 2
     802:	82 e0       	ldi	r24, 0x02	; 2
     804:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
	DIO_set_bit_dir((u8) PORT, (u8) 3, (u8) 1); /*output*/
     808:	41 e0       	ldi	r20, 0x01	; 1
     80a:	63 e0       	ldi	r22, 0x03	; 3
     80c:	82 e0       	ldi	r24, 0x02	; 2
     80e:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
	DIO_set_bit_dir((u8) PORT, (u8) 4, (u8) 0); /*input*/
     812:	40 e0       	ldi	r20, 0x00	; 0
     814:	64 e0       	ldi	r22, 0x04	; 4
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
	DIO_set_bit_dir((u8) PORT, (u8) 5, (u8) 0); /*input*/
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	65 e0       	ldi	r22, 0x05	; 5
     820:	82 e0       	ldi	r24, 0x02	; 2
     822:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
	DIO_set_bit_dir((u8) PORT, (u8) 6, (u8) 0); /*input*/
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	66 e0       	ldi	r22, 0x06	; 6
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
	DIO_set_bit_dir((u8) PORT, (u8) 7, (u8) 0); /*input*/
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	67 e0       	ldi	r22, 0x07	; 7
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
	DIO_connect_pullup((u8) PORT, (u8) 4, (u8) 1);
     83a:	41 e0       	ldi	r20, 0x01	; 1
     83c:	64 e0       	ldi	r22, 0x04	; 4
     83e:	82 e0       	ldi	r24, 0x02	; 2
     840:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_connect_pullup>
	DIO_connect_pullup((u8) PORT, (u8) 5, (u8) 1);
     844:	41 e0       	ldi	r20, 0x01	; 1
     846:	65 e0       	ldi	r22, 0x05	; 5
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_connect_pullup>
	DIO_connect_pullup((u8) PORT, (u8) 6, (u8) 1);
     84e:	41 e0       	ldi	r20, 0x01	; 1
     850:	66 e0       	ldi	r22, 0x06	; 6
     852:	82 e0       	ldi	r24, 0x02	; 2
     854:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_connect_pullup>
     858:	08 95       	ret

0000085a <KEYPAD_read>:

}
u8 KEYPAD_read(void){
     85a:	ef 92       	push	r14
     85c:	ff 92       	push	r15
     85e:	0f 93       	push	r16
     860:	1f 93       	push	r17
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	2c 97       	sbiw	r28, 0x0c	; 12
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
	u8 arr[4][3] = {
     876:	8c e0       	ldi	r24, 0x0C	; 12
     878:	e6 e6       	ldi	r30, 0x66	; 102
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	de 01       	movw	r26, r28
     87e:	11 96       	adiw	r26, 0x01	; 1
     880:	01 90       	ld	r0, Z+
     882:	0d 92       	st	X+, r0
     884:	8a 95       	dec	r24
     886:	e1 f7       	brne	.-8      	; 0x880 <__stack+0x21>
		{4,5,6},
		{7,8,9},
		{10,0,12}
	};
	u8 col,row,x;
	u8 returnValue = NOTPRESSED;
     888:	ee 24       	eor	r14, r14
     88a:	ea 94       	dec	r14
	for(row = (u8) 0; row < (u8) 4; row++){
     88c:	f1 2c       	mov	r15, r1
     88e:	3a c0       	rjmp	.+116    	; 0x904 <__stack+0xa5>
		DIO_write_bit((u8) PORT, (u8) 0, (u8) 1);
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
		DIO_write_bit((u8) PORT, (u8) 1, (u8) 1);
     89a:	41 e0       	ldi	r20, 0x01	; 1
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	82 e0       	ldi	r24, 0x02	; 2
     8a0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
		DIO_write_bit((u8) PORT, (u8) 2, (u8) 1);
     8a4:	41 e0       	ldi	r20, 0x01	; 1
     8a6:	62 e0       	ldi	r22, 0x02	; 2
     8a8:	82 e0       	ldi	r24, 0x02	; 2
     8aa:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
		DIO_write_bit((u8) PORT, (u8) 3, (u8) 1);
     8ae:	41 e0       	ldi	r20, 0x01	; 1
     8b0:	63 e0       	ldi	r22, 0x03	; 3
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
		DIO_write_bit((u8) PORT, row, (u8) 0);
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	6f 2d       	mov	r22, r15
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
		for(col = (u8) 0;col < (u8) 3;col++){
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	1a c0       	rjmp	.+52     	; 0x8fa <__stack+0x9b>
			x = DIO_read_bit((u8) PORT, col + (u8) 4);
     8c6:	64 e0       	ldi	r22, 0x04	; 4
     8c8:	61 0f       	add	r22, r17
     8ca:	82 e0       	ldi	r24, 0x02	; 2
     8cc:	0e 94 1d 01 	call	0x23a	; 0x23a <DIO_read_bit>
     8d0:	08 2f       	mov	r16, r24
			if(x == (u8) 0){
     8d2:	81 11       	cpse	r24, r1
     8d4:	11 c0       	rjmp	.+34     	; 0x8f8 <__stack+0x99>
				returnValue=arr[row][col];
     8d6:	8f 2d       	mov	r24, r15
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	fc 01       	movw	r30, r24
     8dc:	ee 0f       	add	r30, r30
     8de:	ff 1f       	adc	r31, r31
     8e0:	e8 0f       	add	r30, r24
     8e2:	f9 1f       	adc	r31, r25
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	8c 0f       	add	r24, r28
     8ea:	9d 1f       	adc	r25, r29
     8ec:	e8 0f       	add	r30, r24
     8ee:	f9 1f       	adc	r31, r25
     8f0:	e1 0f       	add	r30, r17
     8f2:	f1 1d       	adc	r31, r1
     8f4:	e0 80       	ld	r14, Z
				break;
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <__stack+0x9f>
		DIO_write_bit((u8) PORT, (u8) 0, (u8) 1);
		DIO_write_bit((u8) PORT, (u8) 1, (u8) 1);
		DIO_write_bit((u8) PORT, (u8) 2, (u8) 1);
		DIO_write_bit((u8) PORT, (u8) 3, (u8) 1);
		DIO_write_bit((u8) PORT, row, (u8) 0);
		for(col = (u8) 0;col < (u8) 3;col++){
     8f8:	1f 5f       	subi	r17, 0xFF	; 255
     8fa:	13 30       	cpi	r17, 0x03	; 3
     8fc:	20 f3       	brcs	.-56     	; 0x8c6 <__stack+0x67>
			if(x == (u8) 0){
				returnValue=arr[row][col];
				break;
			}
		}
		if(x == (u8) 0){
     8fe:	00 23       	and	r16, r16
     900:	21 f0       	breq	.+8      	; 0x90a <__stack+0xab>
		{7,8,9},
		{10,0,12}
	};
	u8 col,row,x;
	u8 returnValue = NOTPRESSED;
	for(row = (u8) 0; row < (u8) 4; row++){
     902:	f3 94       	inc	r15
     904:	93 e0       	ldi	r25, 0x03	; 3
     906:	9f 15       	cp	r25, r15
     908:	18 f6       	brcc	.-122    	; 0x890 <__stack+0x31>
		if(x == (u8) 0){
			break;
		}
	}
	return returnValue;
}
     90a:	8e 2d       	mov	r24, r14
     90c:	2c 96       	adiw	r28, 0x0c	; 12
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	ef 90       	pop	r14
     924:	08 95       	ret

00000926 <lcdCommand>:



void lcdCommand(u8 cmnd)
{
    LCD_DPRT = cmnd & (u8)0xF0;          /*send high nibble to D4-D7*/
     926:	98 2f       	mov	r25, r24
     928:	90 7f       	andi	r25, 0xF0	; 240
     92a:	9b bb       	out	0x1b, r25	; 27
    LCD_CPRT &=(u8) ~ (u8)((u8)1<<LCD_RS);        /*RS = 0 for command*/
     92c:	98 b3       	in	r25, 0x18	; 24
     92e:	9d 7f       	andi	r25, 0xFD	; 253
     930:	98 bb       	out	0x18, r25	; 24
    LCD_CPRT &= (u8)~ (u8)((u8)1<<LCD_RW);        /*RW = 0 for write*/
     932:	98 b3       	in	r25, 0x18	; 24
     934:	9b 7f       	andi	r25, 0xFB	; 251
     936:	98 bb       	out	0x18, r25	; 24
    LCD_CPRT |= (u8)((u8)1<<LCD_EN);          /*EN = 1 for H-to-L pulse*/
     938:	98 b3       	in	r25, 0x18	; 24
     93a:	91 60       	ori	r25, 0x01	; 1
     93c:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93e:	00 00       	nop
    _delay_us(1);                                /*make EN pulse wider*/
    LCD_CPRT &=(u8) ~ (u8)((u8)1<<LCD_EN);        /*EN = 0 for H-to-L pulse*/
     940:	98 b3       	in	r25, 0x18	; 24
     942:	9e 7f       	andi	r25, 0xFE	; 254
     944:	98 bb       	out	0x18, r25	; 24
     946:	91 e2       	ldi	r25, 0x21	; 33
     948:	9a 95       	dec	r25
     94a:	f1 f7       	brne	.-4      	; 0x948 <lcdCommand+0x22>
     94c:	00 00       	nop
    _delay_us(100);                          /*wait*/
    LCD_DPRT = cmnd<<4;                              /*send low nibble to D4-D7*/
     94e:	82 95       	swap	r24
     950:	80 7f       	andi	r24, 0xF0	; 240
     952:	8b bb       	out	0x1b, r24	; 27
    LCD_CPRT |= (u8)((u8)1<<LCD_EN);          /*EN = 1 for H-to-L pulse*/
     954:	88 b3       	in	r24, 0x18	; 24
     956:	81 60       	ori	r24, 0x01	; 1
     958:	88 bb       	out	0x18, r24	; 24
     95a:	00 00       	nop
    _delay_us(1);                                /*make EN pulse wider*/
    LCD_CPRT &= (u8)~ (u8)((u8)1<<LCD_EN);        /*EN = 0 for H-to-L pulse*/
     95c:	88 b3       	in	r24, 0x18	; 24
     95e:	8e 7f       	andi	r24, 0xFE	; 254
     960:	88 bb       	out	0x18, r24	; 24
     962:	81 e2       	ldi	r24, 0x21	; 33
     964:	8a 95       	dec	r24
     966:	f1 f7       	brne	.-4      	; 0x964 <lcdCommand+0x3e>
     968:	00 00       	nop
     96a:	08 95       	ret

0000096c <lcdData>:
    _delay_us(100);                     /*wait*/
}

void lcdData(u8 data)
{
    LCD_DPRT = data & (u8)0xF0;          /*send high nibble to D4-D7*/
     96c:	98 2f       	mov	r25, r24
     96e:	90 7f       	andi	r25, 0xF0	; 240
     970:	9b bb       	out	0x1b, r25	; 27
    LCD_CPRT |= (u8)((u8)1<<LCD_RS);         /*RS = 1 for data*/
     972:	98 b3       	in	r25, 0x18	; 24
     974:	92 60       	ori	r25, 0x02	; 2
     976:	98 bb       	out	0x18, r25	; 24
    LCD_CPRT &= (u8)~(u8) ((u8)1<<LCD_RW);       /*RW = 0 for write*/
     978:	98 b3       	in	r25, 0x18	; 24
     97a:	9b 7f       	andi	r25, 0xFB	; 251
     97c:	98 bb       	out	0x18, r25	; 24
    LCD_CPRT |=(u8) ((u8)1<<LCD_EN);         /*EN = 1 for H-to-L pulse*/
     97e:	98 b3       	in	r25, 0x18	; 24
     980:	91 60       	ori	r25, 0x01	; 1
     982:	98 bb       	out	0x18, r25	; 24
     984:	00 00       	nop
    _delay_us(1);                               /*make EN pulse wider*/
    LCD_CPRT &= (u8)~ (u8)((u8)1<<LCD_EN);       /*EN = 0 for H-to-L pulse*/
     986:	98 b3       	in	r25, 0x18	; 24
     988:	9e 7f       	andi	r25, 0xFE	; 254
     98a:	98 bb       	out	0x18, r25	; 24
    LCD_DPRT = data<<4;                             /*send low nibble to D4-D7*/
     98c:	82 95       	swap	r24
     98e:	80 7f       	andi	r24, 0xF0	; 240
     990:	8b bb       	out	0x1b, r24	; 27
    LCD_CPRT |= (u8)((u8)1<<LCD_EN);         /*EN = 1 for H-to-L pulse*/
     992:	88 b3       	in	r24, 0x18	; 24
     994:	81 60       	ori	r24, 0x01	; 1
     996:	88 bb       	out	0x18, r24	; 24
     998:	00 00       	nop
    _delay_us(1);                               /*make EN pulse wider*/
    LCD_CPRT &=(u8) ~ (u8)((u8)1<<LCD_EN);       /*EN = 0 for H-to-L pulse*/
     99a:	88 b3       	in	r24, 0x18	; 24
     99c:	8e 7f       	andi	r24, 0xFE	; 254
     99e:	88 bb       	out	0x18, r24	; 24
     9a0:	81 e2       	ldi	r24, 0x21	; 33
     9a2:	8a 95       	dec	r24
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <lcdData+0x36>
     9a6:	00 00       	nop
     9a8:	08 95       	ret

000009aa <lcd_init>:
    _delay_us(100);                             /*wait*/
}

void lcd_init(void)
{
    LCD_DDDR = (u8) 0xFF;
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	8a bb       	out	0x1a, r24	; 26
    LCD_CDDR = (u8) 0xFF;
     9ae:	87 bb       	out	0x17, r24	; 23
    LCD_CPRT &= (u8)~ (u8)((u8)1<<LCD_EN);       /*LCD_EN = 0*/
     9b0:	88 b3       	in	r24, 0x18	; 24
     9b2:	8e 7f       	andi	r24, 0xFE	; 254
     9b4:	88 bb       	out	0x18, r24	; 24
    lcdCommand((u8)0x33);                /*send $33 for init*/
     9b6:	83 e3       	ldi	r24, 0x33	; 51
     9b8:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
    lcdCommand((u8)0x32);                /*send $32 for init*/
     9bc:	82 e3       	ldi	r24, 0x32	; 50
     9be:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
    lcdCommand((u8)0x28);                /*init. LCD 2 line, 5x7 matrix*/
     9c2:	88 e2       	ldi	r24, 0x28	; 40
     9c4:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
    lcdCommand((u8)0x0c);                /*display on, cursor on*/
     9c8:	8c e0       	ldi	r24, 0x0C	; 12
     9ca:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
    lcdCommand((u8)0x01);                /*clear LCD*/
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
     9d4:	83 ef       	ldi	r24, 0xF3	; 243
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	f1 f7       	brne	.-4      	; 0x9d8 <lcd_init+0x2e>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <lcd_init+0x34>
     9de:	00 00       	nop
    _delay_us(2000);
    lcdCommand((u8)0x06);                /*shift cursor right*/
     9e0:	86 e0       	ldi	r24, 0x06	; 6
     9e2:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
     9e6:	08 95       	ret

000009e8 <lcd_gotoxy>:
}

void lcd_gotoxy(u8 x, u8  y)
{
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <lcd_gotoxy+0x6>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <lcd_gotoxy+0x8>
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
    u8 firstCharAdr[] = {0x80, 0xC0, 0x94, 0xD4};
     9f4:	90 e8       	ldi	r25, 0x80	; 128
     9f6:	99 83       	std	Y+1, r25	; 0x01
     9f8:	90 ec       	ldi	r25, 0xC0	; 192
     9fa:	9a 83       	std	Y+2, r25	; 0x02
     9fc:	94 e9       	ldi	r25, 0x94	; 148
     9fe:	9b 83       	std	Y+3, r25	; 0x03
     a00:	94 ed       	ldi	r25, 0xD4	; 212
     a02:	9c 83       	std	Y+4, r25	; 0x04
    lcdCommand((firstCharAdr[y-(u8)1] + x) - (u8)1);
     a04:	e6 2f       	mov	r30, r22
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	31 97       	sbiw	r30, 0x01	; 1
     a0a:	21 e0       	ldi	r18, 0x01	; 1
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	2c 0f       	add	r18, r28
     a10:	3d 1f       	adc	r19, r29
     a12:	e2 0f       	add	r30, r18
     a14:	f3 1f       	adc	r31, r19
     a16:	90 81       	ld	r25, Z
     a18:	89 0f       	add	r24, r25
     a1a:	81 50       	subi	r24, 0x01	; 1
     a1c:	0e 94 93 04 	call	0x926	; 0x926 <lcdCommand>
     a20:	31 e2       	ldi	r19, 0x21	; 33
     a22:	3a 95       	dec	r19
     a24:	f1 f7       	brne	.-4      	; 0xa22 <lcd_gotoxy+0x3a>
     a26:	00 00       	nop
    _delay_us(100);
}
     a28:	0f 90       	pop	r0
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <lcd_print>:

void lcd_print(const char * str)
{
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	8c 01       	movw	r16, r24
    u8 i = 0;
     a3e:	c0 e0       	ldi	r28, 0x00	; 0
    while((u8)str[i] != (u8)0)/*Justification for 17.4 the index will never exceed our predected range*/
     a40:	03 c0       	rjmp	.+6      	; 0xa48 <lcd_print+0x12>
    {
        lcdData((u8)str[i]);/*Justification for 17.4 the index will never exceed our predected range*/
     a42:	0e 94 b6 04 	call	0x96c	; 0x96c <lcdData>
        i++;
     a46:	cf 5f       	subi	r28, 0xFF	; 255
}

void lcd_print(const char * str)
{
    u8 i = 0;
    while((u8)str[i] != (u8)0)/*Justification for 17.4 the index will never exceed our predected range*/
     a48:	f8 01       	movw	r30, r16
     a4a:	ec 0f       	add	r30, r28
     a4c:	f1 1d       	adc	r31, r1
     a4e:	80 81       	ld	r24, Z
     a50:	81 11       	cpse	r24, r1
     a52:	f7 cf       	rjmp	.-18     	; 0xa42 <lcd_print+0xc>
    {
        lcdData((u8)str[i]);/*Justification for 17.4 the index will never exceed our predected range*/
        i++;
    }
}
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	08 95       	ret

00000a5c <main>:
u16 main(void)
{
    u8 CurrentState = STANDBY_STATE;
    u8 KeyPadVal = 0xff;
    /*inits -------------------------*/
    KEYPAD_init();
     a5c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <KEYPAD_init>
    TC72_init_continuos();
     a60:	0e 94 2b 07 	call	0xe56	; 0xe56 <TC72_init_continuos>
    heaterOn();
     a64:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <heaterOn>
    /*-----------------------------*/
    display_welcome();
     a68:	0e 94 4c 02 	call	0x498	; 0x498 <display_welcome>

u16 main(void);

u16 main(void)
{
    u8 CurrentState = STANDBY_STATE;
     a6c:	c1 e0       	ldi	r28, 0x01	; 1
    KEYPAD_init();
    TC72_init_continuos();
    heaterOn();
    /*-----------------------------*/
    display_welcome();
    while (ErrorFlag==(u8)0)
     a6e:	0f c1       	rjmp	.+542    	; 0xc8e <main+0x232>
    {
        switch(CurrentState)
     a70:	c2 30       	cpi	r28, 0x02	; 2
     a72:	09 f4       	brne	.+2      	; 0xa76 <main+0x1a>
     a74:	9a c0       	rjmp	.+308    	; 0xbaa <main+0x14e>
     a76:	18 f4       	brcc	.+6      	; 0xa7e <main+0x22>
     a78:	c1 30       	cpi	r28, 0x01	; 1
     a7a:	41 f0       	breq	.+16     	; 0xa8c <main+0x30>
     a7c:	07 c1       	rjmp	.+526    	; 0xc8c <main+0x230>
     a7e:	c3 30       	cpi	r28, 0x03	; 3
     a80:	09 f4       	brne	.+2      	; 0xa84 <main+0x28>
     a82:	51 c0       	rjmp	.+162    	; 0xb26 <main+0xca>
     a84:	c4 30       	cpi	r28, 0x04	; 4
     a86:	09 f4       	brne	.+2      	; 0xa8a <main+0x2e>
     a88:	df c0       	rjmp	.+446    	; 0xc48 <main+0x1ec>
     a8a:	00 c1       	rjmp	.+512    	; 0xc8c <main+0x230>
        {
            case STANDBY_STATE:
                heaterOff();
     a8c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <heaterOff>
                TimerOff();
     a90:	0e 94 67 07 	call	0xece	; 0xece <TimerOff>
                display_state(SetTemp, CurrentTemp, STANDBY_STATE);
     a94:	41 e0       	ldi	r20, 0x01	; 1
     a96:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <CurrentTemp>
     a9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a9e:	0e 94 90 02 	call	0x520	; 0x520 <display_state>
                //_delay_ms(500);
                update_state((u8)5);
     aa2:	85 e0       	ldi	r24, 0x05	; 5
     aa4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <update_state>

                do
                {
                    KeyPadVal = KEYPAD_read(); /*get tens value*/
     aa8:	0e 94 2d 04 	call	0x85a	; 0x85a <KEYPAD_read>
                    if (KeyPadVal == (u8) 12)
     aac:	8c 30       	cpi	r24, 0x0C	; 12
     aae:	29 f0       	breq	.+10     	; 0xaba <main+0x5e>
                    {
                        CurrentState = OPERATIONAL_STATE;
                        break;
                    }

                } while ((KeyPadVal == (u8) 0xff) || (KeyPadVal == (u8) 10));
     ab0:	8f 3f       	cpi	r24, 0xFF	; 255
     ab2:	d1 f3       	breq	.-12     	; 0xaa8 <main+0x4c>
     ab4:	8a 30       	cpi	r24, 0x0A	; 10
     ab6:	c1 f3       	breq	.-16     	; 0xaa8 <main+0x4c>
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <main+0x60>
                do
                {
                    KeyPadVal = KEYPAD_read(); /*get tens value*/
                    if (KeyPadVal == (u8) 12)
                    {
                        CurrentState = OPERATIONAL_STATE;
     aba:	c2 e0       	ldi	r28, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     abc:	2f e5       	ldi	r18, 0x5F	; 95
     abe:	3a ee       	ldi	r19, 0xEA	; 234
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	21 50       	subi	r18, 0x01	; 1
     ac4:	30 40       	sbci	r19, 0x00	; 0
     ac6:	90 40       	sbci	r25, 0x00	; 0
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <main+0x66>
     aca:	00 c0       	rjmp	.+0      	; 0xacc <main+0x70>
     acc:	00 00       	nop
                    }

                } while ((KeyPadVal == (u8) 0xff) || (KeyPadVal == (u8) 10));
                _delay_ms(300);

                if(KeyPadVal == (u8) 12){
     ace:	8c 30       	cpi	r24, 0x0C	; 12
     ad0:	09 f4       	brne	.+2      	; 0xad4 <main+0x78>
     ad2:	dd c0       	rjmp	.+442    	; 0xc8e <main+0x232>
                    break;
                }

                SetTemp = KeyPadVal;
     ad4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
                KeyPadVal = (u8) 0xff;

                do
                {
                    KeyPadVal = KEYPAD_read(); /*get tens value*/
     ad8:	0e 94 2d 04 	call	0x85a	; 0x85a <KEYPAD_read>
                    if (KeyPadVal == (u8) 12)
     adc:	8c 30       	cpi	r24, 0x0C	; 12
     ade:	29 f0       	breq	.+10     	; 0xaea <main+0x8e>
                    {
                        CurrentState = OPERATIONAL_STATE;
                        break;
                    }
                } while ((KeyPadVal ==(u8) 0xff) || (KeyPadVal == (u8)10));
     ae0:	8f 3f       	cpi	r24, 0xFF	; 255
     ae2:	d1 f3       	breq	.-12     	; 0xad8 <main+0x7c>
     ae4:	8a 30       	cpi	r24, 0x0A	; 10
     ae6:	c1 f3       	breq	.-16     	; 0xad8 <main+0x7c>
     ae8:	01 c0       	rjmp	.+2      	; 0xaec <main+0x90>
                do
                {
                    KeyPadVal = KEYPAD_read(); /*get tens value*/
                    if (KeyPadVal == (u8) 12)
                    {
                        CurrentState = OPERATIONAL_STATE;
     aea:	c2 e0       	ldi	r28, 0x02	; 2
                        break;
                    }
                } while ((KeyPadVal ==(u8) 0xff) || (KeyPadVal == (u8)10));

                if(KeyPadVal != (u8) 12)
     aec:	8c 30       	cpi	r24, 0x0C	; 12
     aee:	69 f0       	breq	.+26     	; 0xb0a <main+0xae>
                {
                    SetTemp *= (u8)10;
     af0:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     af4:	29 2f       	mov	r18, r25
     af6:	22 0f       	add	r18, r18
     af8:	92 2f       	mov	r25, r18
     afa:	99 0f       	add	r25, r25
     afc:	99 0f       	add	r25, r25
     afe:	92 0f       	add	r25, r18
                    SetTemp += KeyPadVal;
     b00:	89 0f       	add	r24, r25
     b02:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     b06:	01 c0       	rjmp	.+2      	; 0xb0a <main+0xae>
                    KeyPadVal = (u8)0xff;
                }

                while(KEYPAD_read() != (u8) 12)
                {
                    CurrentState = OPERATIONAL_STATE;
     b08:	c2 e0       	ldi	r28, 0x02	; 2
                    SetTemp *= (u8)10;
                    SetTemp += KeyPadVal;
                    KeyPadVal = (u8)0xff;
                }

                while(KEYPAD_read() != (u8) 12)
     b0a:	0e 94 2d 04 	call	0x85a	; 0x85a <KEYPAD_read>
     b0e:	8c 30       	cpi	r24, 0x0C	; 12
     b10:	d9 f7       	brne	.-10     	; 0xb08 <main+0xac>
     b12:	2f e9       	ldi	r18, 0x9F	; 159
     b14:	36 e8       	ldi	r19, 0x86	; 134
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	21 50       	subi	r18, 0x01	; 1
     b1a:	30 40       	sbci	r19, 0x00	; 0
     b1c:	80 40       	sbci	r24, 0x00	; 0
     b1e:	e1 f7       	brne	.-8      	; 0xb18 <main+0xbc>
     b20:	00 c0       	rjmp	.+0      	; 0xb22 <main+0xc6>
     b22:	00 00       	nop
     b24:	b4 c0       	rjmp	.+360    	; 0xc8e <main+0x232>
                }
                _delay_ms(500);
                break;

            case NORMAL_STATE:
                TIMER_init0_CTC_interrupt((u8) 0x62);
     b26:	82 e6       	ldi	r24, 0x62	; 98
     b28:	0e 94 52 07 	call	0xea4	; 0xea4 <TIMER_init0_CTC_interrupt>
                update_state(CurrentState);
     b2c:	8c 2f       	mov	r24, r28
     b2e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <update_state>
                update_set(SetTemp);
     b32:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b36:	0e 94 12 03 	call	0x624	; 0x624 <update_set>
                update_current(CurrentTemp);
     b3a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <CurrentTemp>
     b3e:	0e 94 31 03 	call	0x662	; 0x662 <update_current>
                duty_cycle_control(SetTemp,CurrentTemp,(float32_t) 0);
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	a9 01       	movw	r20, r18
     b48:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <CurrentTemp>
     b4c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b50:	0e 94 82 03 	call	0x704	; 0x704 <duty_cycle_control>
                if(KEYPAD_read() == (u8) 12)
     b54:	0e 94 2d 04 	call	0x85a	; 0x85a <KEYPAD_read>
     b58:	8c 30       	cpi	r24, 0x0C	; 12
     b5a:	09 f4       	brne	.+2      	; 0xb5e <main+0x102>
                {
                    CurrentState = STANDBY_STATE;
     b5c:	c1 e0       	ldi	r28, 0x01	; 1
                }

                if((((CurrentTemp >= SetTemp) && ((CurrentTemp - SetTemp) <= (u8) 5))==0 )&& (((CurrentTemp <= SetTemp) && ((SetTemp - CurrentTemp) <= (u8) 5))==0))
     b5e:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <CurrentTemp>
     b62:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     b66:	48 17       	cp	r20, r24
     b68:	50 f0       	brcs	.+20     	; 0xb7e <main+0x122>
     b6a:	24 2f       	mov	r18, r20
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	28 1b       	sub	r18, r24
     b70:	31 09       	sbc	r19, r1
     b72:	26 30       	cpi	r18, 0x06	; 6
     b74:	31 05       	cpc	r19, r1
     b76:	34 f0       	brlt	.+12     	; 0xb84 <main+0x128>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	05 c0       	rjmp	.+10     	; 0xb88 <main+0x12c>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	02 c0       	rjmp	.+4      	; 0xb88 <main+0x12c>
     b84:	21 e0       	ldi	r18, 0x01	; 1
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	21 15       	cp	r18, r1
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <main+0x134>
     b8e:	7f c0       	rjmp	.+254    	; 0xc8e <main+0x232>
     b90:	84 17       	cp	r24, r20
     b92:	38 f0       	brcs	.+14     	; 0xba2 <main+0x146>
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	84 1b       	sub	r24, r20
     b98:	91 09       	sbc	r25, r1
     b9a:	06 97       	sbiw	r24, 0x06	; 6
     b9c:	14 f4       	brge	.+4      	; 0xba2 <main+0x146>
     b9e:	21 e0       	ldi	r18, 0x01	; 1
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	23 2b       	or	r18, r19
     ba4:	09 f4       	brne	.+2      	; 0xba8 <main+0x14c>
     ba6:	6e c0       	rjmp	.+220    	; 0xc84 <main+0x228>
     ba8:	72 c0       	rjmp	.+228    	; 0xc8e <main+0x232>
                }

                break;

            case OPERATIONAL_STATE:
                TIMER_init0_CTC_interrupt((u8) 0x62);
     baa:	82 e6       	ldi	r24, 0x62	; 98
     bac:	0e 94 52 07 	call	0xea4	; 0xea4 <TIMER_init0_CTC_interrupt>
                update_state(CurrentState);
     bb0:	8c 2f       	mov	r24, r28
     bb2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <update_state>
                update_set(SetTemp);
     bb6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bba:	0e 94 12 03 	call	0x624	; 0x624 <update_set>
                update_current(CurrentTemp);
     bbe:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <CurrentTemp>
     bc2:	0e 94 31 03 	call	0x662	; 0x662 <update_current>
                duty_cycle_control(SetTemp,CurrentTemp,Vr);
     bc6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Vr>
     bca:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <Vr+0x1>
     bce:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <Vr+0x2>
     bd2:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <Vr+0x3>
     bd6:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <CurrentTemp>
     bda:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bde:	0e 94 82 03 	call	0x704	; 0x704 <duty_cycle_control>
                if(KEYPAD_read() == (u8) 12)
     be2:	0e 94 2d 04 	call	0x85a	; 0x85a <KEYPAD_read>
     be6:	8c 30       	cpi	r24, 0x0C	; 12
     be8:	09 f4       	brne	.+2      	; 0xbec <main+0x190>
                {
                    CurrentState = STANDBY_STATE;
     bea:	c1 e0       	ldi	r28, 0x01	; 1
                }
                if((CurrentTemp >= SetTemp) && ((CurrentTemp - SetTemp) <= (u8) 5))
     bec:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <CurrentTemp>
     bf0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     bf4:	28 17       	cp	r18, r24
     bf6:	40 f0       	brcs	.+16     	; 0xc08 <main+0x1ac>
     bf8:	42 2f       	mov	r20, r18
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	48 1b       	sub	r20, r24
     bfe:	51 09       	sbc	r21, r1
     c00:	46 30       	cpi	r20, 0x06	; 6
     c02:	51 05       	cpc	r21, r1
     c04:	0c f4       	brge	.+2      	; 0xc08 <main+0x1ac>
                {
                    CurrentState = NORMAL_STATE;
     c06:	c3 e0       	ldi	r28, 0x03	; 3
                }
                if((CurrentTemp <= SetTemp) && ((SetTemp - CurrentTemp) <= (u8) 5))
     c08:	82 17       	cp	r24, r18
     c0a:	40 f0       	brcs	.+16     	; 0xc1c <main+0x1c0>
     c0c:	48 2f       	mov	r20, r24
     c0e:	50 e0       	ldi	r21, 0x00	; 0
     c10:	42 1b       	sub	r20, r18
     c12:	51 09       	sbc	r21, r1
     c14:	46 30       	cpi	r20, 0x06	; 6
     c16:	51 05       	cpc	r21, r1
     c18:	0c f4       	brge	.+2      	; 0xc1c <main+0x1c0>
                {
                    CurrentState = NORMAL_STATE;
     c1a:	c3 e0       	ldi	r28, 0x03	; 3
                }
                if((CurrentTemp > SetTemp) && ((CurrentTemp - SetTemp) > (u8) 10))
     c1c:	82 17       	cp	r24, r18
     c1e:	40 f4       	brcc	.+16     	; 0xc30 <main+0x1d4>
     c20:	42 2f       	mov	r20, r18
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	48 1b       	sub	r20, r24
     c26:	51 09       	sbc	r21, r1
     c28:	4b 30       	cpi	r20, 0x0B	; 11
     c2a:	51 05       	cpc	r21, r1
     c2c:	0c f0       	brlt	.+2      	; 0xc30 <main+0x1d4>
                {
                    CurrentState = ERROR_STATE;
     c2e:	c4 e0       	ldi	r28, 0x04	; 4
                }
                if((SetTemp > CurrentTemp) && ((SetTemp - CurrentTemp) > (u8) 5) && Three_min_flag)
     c30:	28 17       	cp	r18, r24
     c32:	68 f5       	brcc	.+90     	; 0xc8e <main+0x232>
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	82 1b       	sub	r24, r18
     c38:	91 09       	sbc	r25, r1
     c3a:	06 97       	sbiw	r24, 0x06	; 6
     c3c:	44 f1       	brlt	.+80     	; 0xc8e <main+0x232>
     c3e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <Three_min_flag>
     c42:	81 11       	cpse	r24, r1
     c44:	21 c0       	rjmp	.+66     	; 0xc88 <main+0x22c>
     c46:	23 c0       	rjmp	.+70     	; 0xc8e <main+0x232>
                }

                break;

            case ERROR_STATE:
                update_state(CurrentState);
     c48:	8c 2f       	mov	r24, r28
     c4a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <update_state>
                update_set(SetTemp);
     c4e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c52:	0e 94 12 03 	call	0x624	; 0x624 <update_set>
                update_current(CurrentTemp);
     c56:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <CurrentTemp>
     c5a:	0e 94 31 03 	call	0x662	; 0x662 <update_current>
                //_delay_ms(1000);
                heaterOff();
     c5e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <heaterOff>
                TimerOff();
     c62:	0e 94 67 07 	call	0xece	; 0xece <TimerOff>
                TC72_off_continuos();
     c66:	0e 94 3e 07 	call	0xe7c	; 0xe7c <TC72_off_continuos>
                duty_cycle_control((u8)SetTemp,(u8)CurrentTemp,(float32_t)0);
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	a9 01       	movw	r20, r18
     c70:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <CurrentTemp>
     c74:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     c78:	0e 94 82 03 	call	0x704	; 0x704 <duty_cycle_control>
                ErrorFlag= (u8) 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <__data_end>
                break;
     c82:	05 c0       	rjmp	.+10     	; 0xc8e <main+0x232>
                    CurrentState = STANDBY_STATE;
                }

                if((((CurrentTemp >= SetTemp) && ((CurrentTemp - SetTemp) <= (u8) 5))==0 )&& (((CurrentTemp <= SetTemp) && ((SetTemp - CurrentTemp) <= (u8) 5))==0))
                {
                    CurrentState = OPERATIONAL_STATE;
     c84:	c2 e0       	ldi	r28, 0x02	; 2
     c86:	03 c0       	rjmp	.+6      	; 0xc8e <main+0x232>
                {
                    CurrentState = ERROR_STATE;
                }
                if((SetTemp > CurrentTemp) && ((SetTemp - CurrentTemp) > (u8) 5) && Three_min_flag)
                {
                    CurrentState = ERROR_STATE;
     c88:	c4 e0       	ldi	r28, 0x04	; 4
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <main+0x232>
                TC72_off_continuos();
                duty_cycle_control((u8)SetTemp,(u8)CurrentTemp,(float32_t)0);
                ErrorFlag= (u8) 1;
                break;
            default:
                CurrentState = ERROR_STATE;
     c8c:	c4 e0       	ldi	r28, 0x04	; 4
    KEYPAD_init();
    TC72_init_continuos();
    heaterOn();
    /*-----------------------------*/
    display_welcome();
    while (ErrorFlag==(u8)0)
     c8e:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <__data_end>
     c92:	88 23       	and	r24, r24
     c94:	09 f4       	brne	.+2      	; 0xc98 <main+0x23c>
     c96:	ec ce       	rjmp	.-552    	; 0xa70 <main+0x14>
     c98:	ff cf       	rjmp	.-2      	; 0xc98 <main+0x23c>

00000c9a <__vector_10>:
    while(1){};
}



ISR(TIMER0_COMP_vect){
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
    read_res_counter++;
     cbc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <read_res_counter>
     cc0:	8f 5f       	subi	r24, 0xFF	; 255
     cc2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <read_res_counter>
    read_temp_counter++;
     cc6:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <read_temp_counter>
     cca:	8f 5f       	subi	r24, 0xFF	; 255
     ccc:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <read_temp_counter>

    if (read_temp_counter == (u8) 2)
     cd0:	80 91 df 00 	lds	r24, 0x00DF	; 0x8000df <read_temp_counter>
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	31 f4       	brne	.+12     	; 0xce4 <__vector_10+0x4a>
    {
        read_temp_counter=(u8)0;
     cd8:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <read_temp_counter>
        CurrentTemp= TC72_get_temp();
     cdc:	0e 94 41 07 	call	0xe82	; 0xe82 <TC72_get_temp>
     ce0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <CurrentTemp>
    }

    if (read_res_counter == (u8) 5)
     ce4:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <read_res_counter>
     ce8:	85 30       	cpi	r24, 0x05	; 5
     cea:	61 f4       	brne	.+24     	; 0xd04 <__vector_10+0x6a>
    {
        read_res_counter= (u8) 0;
     cec:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <read_res_counter>
        Vr= ADC_read();
     cf0:	0e 94 df 03 	call	0x7be	; 0x7be <ADC_read>
     cf4:	60 93 62 00 	sts	0x0062, r22	; 0x800062 <Vr>
     cf8:	70 93 63 00 	sts	0x0063, r23	; 0x800063 <Vr+0x1>
     cfc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Vr+0x2>
     d00:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <Vr+0x3>
    }

    if((CurrentTemp < SetTemp) && ((SetTemp-CurrentTemp) >  (u8) 5))
     d04:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <CurrentTemp>
     d08:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     d0c:	28 17       	cp	r18, r24
     d0e:	88 f4       	brcc	.+34     	; 0xd32 <__vector_10+0x98>
     d10:	48 2f       	mov	r20, r24
     d12:	50 e0       	ldi	r21, 0x00	; 0
     d14:	42 1b       	sub	r20, r18
     d16:	51 09       	sbc	r21, r1
     d18:	46 30       	cpi	r20, 0x06	; 6
     d1a:	51 05       	cpc	r21, r1
     d1c:	54 f0       	brlt	.+20     	; 0xd32 <__vector_10+0x98>
    {
        three_min_error_counter++;
     d1e:	40 91 dd 00 	lds	r20, 0x00DD	; 0x8000dd <three_min_error_counter>
     d22:	50 91 de 00 	lds	r21, 0x00DE	; 0x8000de <three_min_error_counter+0x1>
     d26:	4f 5f       	subi	r20, 0xFF	; 255
     d28:	5f 4f       	sbci	r21, 0xFF	; 255
     d2a:	50 93 de 00 	sts	0x00DE, r21	; 0x8000de <three_min_error_counter+0x1>
     d2e:	40 93 dd 00 	sts	0x00DD, r20	; 0x8000dd <three_min_error_counter>
    }

    if (three_min_error_counter >= (u16) 1800)
     d32:	40 91 dd 00 	lds	r20, 0x00DD	; 0x8000dd <three_min_error_counter>
     d36:	50 91 de 00 	lds	r21, 0x00DE	; 0x8000de <three_min_error_counter+0x1>
     d3a:	48 30       	cpi	r20, 0x08	; 8
     d3c:	57 40       	sbci	r21, 0x07	; 7
     d3e:	18 f0       	brcs	.+6      	; 0xd46 <__vector_10+0xac>
    {
        Three_min_flag=(u8)1;
     d40:	91 e0       	ldi	r25, 0x01	; 1
     d42:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <Three_min_flag>
    }

    if ((three_min_error_counter <=  (u16) 1800 )&& (((CurrentTemp < SetTemp) && ((SetTemp-CurrentTemp) >  (u8) 5)) ==0))
     d46:	40 91 dd 00 	lds	r20, 0x00DD	; 0x8000dd <three_min_error_counter>
     d4a:	50 91 de 00 	lds	r21, 0x00DE	; 0x8000de <three_min_error_counter+0x1>
     d4e:	49 30       	cpi	r20, 0x09	; 9
     d50:	57 40       	sbci	r21, 0x07	; 7
     d52:	a8 f4       	brcc	.+42     	; 0xd7e <__vector_10+0xe4>
     d54:	28 17       	cp	r18, r24
     d56:	40 f4       	brcc	.+16     	; 0xd68 <__vector_10+0xce>
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	82 1b       	sub	r24, r18
     d5c:	91 09       	sbc	r25, r1
     d5e:	06 97       	sbiw	r24, 0x06	; 6
     d60:	34 f4       	brge	.+12     	; 0xd6e <__vector_10+0xd4>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <__vector_10+0xd8>
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <__vector_10+0xd8>
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	89 2b       	or	r24, r25
     d74:	21 f4       	brne	.+8      	; 0xd7e <__vector_10+0xe4>
    {
        three_min_error_counter= (u16) 0;
     d76:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <three_min_error_counter+0x1>
     d7a:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <three_min_error_counter>
    }

}
     d7e:	ff 91       	pop	r31
     d80:	ef 91       	pop	r30
     d82:	bf 91       	pop	r27
     d84:	af 91       	pop	r26
     d86:	9f 91       	pop	r25
     d88:	8f 91       	pop	r24
     d8a:	7f 91       	pop	r23
     d8c:	6f 91       	pop	r22
     d8e:	5f 91       	pop	r21
     d90:	4f 91       	pop	r20
     d92:	3f 91       	pop	r19
     d94:	2f 91       	pop	r18
     d96:	0f 90       	pop	r0
     d98:	0f be       	out	0x3f, r0	; 63
     d9a:	0f 90       	pop	r0
     d9c:	1f 90       	pop	r1
     d9e:	18 95       	reti

00000da0 <PWM_init>:
#include "Regesters.h"

void PWM_init(void){

	/* fast pwm mode */
	TCCR1A |= (u8)((u8)((u8)1 << COM1B1) | (u8)((u8)1 << WGM11) | (u8)((u8)1 << WGM10));
     da0:	8f b5       	in	r24, 0x2f	; 47
     da2:	83 62       	ori	r24, 0x23	; 35
     da4:	8f bd       	out	0x2f, r24	; 47
	/* CS10= 1 means no prescaler, WGM12= 1 means clear time on compare match mode is enabled  */
	TCCR1B |= (u8)((u8)((u8)1 << CS10) | (u8)((u8)1 << WGM12));
     da6:	8e b5       	in	r24, 0x2e	; 46
     da8:	89 60       	ori	r24, 0x09	; 9
     daa:	8e bd       	out	0x2e, r24	; 46
	/* set OC1B as output (PD04) */
	DDRD |= (u8)((u8)1 << DDD4);
     dac:	81 b3       	in	r24, 0x11	; 17
     dae:	80 61       	ori	r24, 0x10	; 16
     db0:	81 bb       	out	0x11, r24	; 17
     db2:	08 95       	ret

00000db4 <PWM_fast>:
}


void PWM_fast(float32_t duty_cycle){
     db4:	cf 92       	push	r12
     db6:	df 92       	push	r13
     db8:	ef 92       	push	r14
     dba:	ff 92       	push	r15
     dbc:	6b 01       	movw	r12, r22
     dbe:	7c 01       	movw	r14, r24
	/*frequency*/
	OCR1A = (u16)1000;
     dc0:	88 ee       	ldi	r24, 0xE8	; 232
     dc2:	93 e0       	ldi	r25, 0x03	; 3
     dc4:	9b bd       	out	0x2b, r25	; 43
     dc6:	8a bd       	out	0x2a, r24	; 42
	/* (0-1023) */
	if ((float32_t)duty_cycle > (float32_t)0)
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	a9 01       	movw	r20, r18
     dce:	c7 01       	movw	r24, r14
     dd0:	b6 01       	movw	r22, r12
     dd2:	0e 94 16 09 	call	0x122c	; 0x122c <__gesf2>
     dd6:	18 16       	cp	r1, r24
     dd8:	3c f4       	brge	.+14     	; 0xde8 <PWM_fast+0x34>
	{
		OCR1B = (u16)duty_cycle;
     dda:	c7 01       	movw	r24, r14
     ddc:	b6 01       	movw	r22, r12
     dde:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__fixunssfsi>
     de2:	79 bd       	out	0x29, r23	; 41
     de4:	68 bd       	out	0x28, r22	; 40
     de6:	02 c0       	rjmp	.+4      	; 0xdec <PWM_fast+0x38>
	}
	else
	{
		OCR1B = (u16)0;
     de8:	19 bc       	out	0x29, r1	; 41
     dea:	18 bc       	out	0x28, r1	; 40

	}
}
     dec:	ff 90       	pop	r15
     dee:	ef 90       	pop	r14
     df0:	df 90       	pop	r13
     df2:	cf 90       	pop	r12
     df4:	08 95       	ret

00000df6 <PWM_off>:


void PWM_off(void){
	/*frequency*/
	OCR1A = (u8)0;
     df6:	1b bc       	out	0x2b, r1	; 43
     df8:	1a bc       	out	0x2a, r1	; 42
	/* (0-1023) */
	OCR1B = (u8)0;
     dfa:	19 bc       	out	0x29, r1	; 41
     dfc:	18 bc       	out	0x28, r1	; 40
     dfe:	08 95       	ret

00000e00 <SPI_master_init>:
#include "TC72.h"

void SPI_master_init(void)
{
    /*Set SS / MOSI / SCK  as output pins for master*/
    DIO_set_bit_dir((u8)1,(u8)4,(u8)1);
     e00:	41 e0       	ldi	r20, 0x01	; 1
     e02:	64 e0       	ldi	r22, 0x04	; 4
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
    DIO_set_bit_dir((u8)1,(u8)5,(u8)1);
     e0a:	41 e0       	ldi	r20, 0x01	; 1
     e0c:	65 e0       	ldi	r22, 0x05	; 5
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
    DIO_set_bit_dir((u8)1,(u8)7,(u8)1);
     e14:	41 e0       	ldi	r20, 0x01	; 1
     e16:	67 e0       	ldi	r22, 0x07	; 7
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	0e 94 b0 00 	call	0x160	; 0x160 <DIO_set_bit_dir>
    /*Enable Master mode*/
    SPCR |= (u8)((u8)1<<MSTR);
     e1e:	8d b1       	in	r24, 0x0d	; 13
     e20:	80 61       	ori	r24, 0x10	; 16
     e22:	8d b9       	out	0x0d, r24	; 13
    /*Set clock to fosc/128*/
    SPCR|= (u8)((u8)1<<SPR0);
     e24:	8d b1       	in	r24, 0x0d	; 13
     e26:	81 60       	ori	r24, 0x01	; 1
     e28:	8d b9       	out	0x0d, r24	; 13
    SPCR|= (u8)((u8)1<<SPR1);
     e2a:	8d b1       	in	r24, 0x0d	; 13
     e2c:	82 60       	ori	r24, 0x02	; 2
     e2e:	8d b9       	out	0x0d, r24	; 13
    /*SPI mode 0*/
    SPCR |= (u8)((u8)1<<CPHA);
     e30:	8d b1       	in	r24, 0x0d	; 13
     e32:	84 60       	ori	r24, 0x04	; 4
     e34:	8d b9       	out	0x0d, r24	; 13
    SPCR &= (u8)(~(u8)((u8)1<<CPOL));
     e36:	8d b1       	in	r24, 0x0d	; 13
     e38:	87 7f       	andi	r24, 0xF7	; 247
     e3a:	8d b9       	out	0x0d, r24	; 13
    /*Enable SPI*/
    SPCR |= (u8)((u8)1<<SPE);
     e3c:	8d b1       	in	r24, 0x0d	; 13
     e3e:	80 64       	ori	r24, 0x40	; 64
     e40:	8d b9       	out	0x0d, r24	; 13
     e42:	08 95       	ret

00000e44 <SPI_master_off>:
}
void SPI_master_off(void){
    SPCR &= (u8)~((u8)((u8)1<<SPE));
     e44:	8d b1       	in	r24, 0x0d	; 13
     e46:	8f 7b       	andi	r24, 0xBF	; 191
     e48:	8d b9       	out	0x0d, r24	; 13
     e4a:	08 95       	ret

00000e4c <SPI_master_transmit_char>:

u8 SPI_master_transmit_char(u8 Data)
{
    /*Clear SS to send data to slave*/
    /*Put data on SPDR*/
     SPDR=Data;
     e4c:	8f b9       	out	0x0f, r24	; 15
    /*Wait until the transmission is finished*/
     while( (u8)( (SPSR & (u8)((u8)1<<SPIF) )>>SPIF) == (u8)0){}
     e4e:	77 9b       	sbis	0x0e, 7	; 14
     e50:	fe cf       	rjmp	.-4      	; 0xe4e <SPI_master_transmit_char+0x2>
     /*read SPDR*/
     return SPDR ;
     e52:	8f b1       	in	r24, 0x0f	; 15
}
     e54:	08 95       	ret

00000e56 <TC72_init_continuos>:
#include "TC72.h"
/*#include <util/delay.h>*/
#include "Basic_Types.h"

void TC72_init_continuos(void){
    SPI_master_init();
     e56:	0e 94 00 07 	call	0xe00	; 0xe00 <SPI_master_init>
    DIO_write_bit((u8)1,(u8)4,(u8)0);
     e5a:	40 e0       	ldi	r20, 0x00	; 0
     e5c:	64 e0       	ldi	r22, 0x04	; 4
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
    DIO_write_bit((u8)1,(u8)4,(u8)1);
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	64 e0       	ldi	r22, 0x04	; 4
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
    SPI_master_transmit_char((u8)0x80);
     e6e:	80 e8       	ldi	r24, 0x80	; 128
     e70:	0e 94 26 07 	call	0xe4c	; 0xe4c <SPI_master_transmit_char>
    SPI_master_transmit_char((u8)0x04);
     e74:	84 e0       	ldi	r24, 0x04	; 4
     e76:	0e 94 26 07 	call	0xe4c	; 0xe4c <SPI_master_transmit_char>
     e7a:	08 95       	ret

00000e7c <TC72_off_continuos>:
}
void TC72_off_continuos(void){
    SPI_master_off();
     e7c:	0e 94 22 07 	call	0xe44	; 0xe44 <SPI_master_off>
     e80:	08 95       	ret

00000e82 <TC72_get_temp>:
}

u8 TC72_get_temp(void){
    u8 data;
    DIO_write_bit((u8)1,(u8)4,(u8)0);
     e82:	40 e0       	ldi	r20, 0x00	; 0
     e84:	64 e0       	ldi	r22, 0x04	; 4
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
    DIO_write_bit((u8)1,(u8)4,(u8)1);
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	64 e0       	ldi	r22, 0x04	; 4
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_write_bit>
    data=SPI_master_transmit_char((u8)0x02);
     e96:	82 e0       	ldi	r24, 0x02	; 2
     e98:	0e 94 26 07 	call	0xe4c	; 0xe4c <SPI_master_transmit_char>
    data=(signed char)SPI_master_transmit_char((u8)0x00);
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	0e 94 26 07 	call	0xe4c	; 0xe4c <SPI_master_transmit_char>
    return data;

}
     ea2:	08 95       	ret

00000ea4 <TIMER_init0_CTC_interrupt>:
#include "TIMER.h"
#include "Basic_Types.h"

void TIMER_init0_CTC_interrupt(u8 value){
    /*select mode*/
    TCCR0 |= (u8)((u8)1<<WGM01);
     ea4:	93 b7       	in	r25, 0x33	; 51
     ea6:	98 60       	ori	r25, 0x08	; 8
     ea8:	93 bf       	out	0x33, r25	; 51
    TCCR0 &= (u8)((u8)~(u8)((u8)1<<WGM00));
     eaa:	93 b7       	in	r25, 0x33	; 51
     eac:	9f 7b       	andi	r25, 0xBF	; 191
     eae:	93 bf       	out	0x33, r25	; 51
    /*enable global interrupt*/

    sei();
     eb0:	78 94       	sei
    /*misra violation beacaude this function is from another library */

    /*define clock(prescaler)*/
    TCCR0 |= (u8)((u8)1<<CS00);
     eb2:	93 b7       	in	r25, 0x33	; 51
     eb4:	91 60       	ori	r25, 0x01	; 1
     eb6:	93 bf       	out	0x33, r25	; 51
    TCCR0 &= (u8)(~(u8)((u8)1<<CS01));
     eb8:	93 b7       	in	r25, 0x33	; 51
     eba:	9d 7f       	andi	r25, 0xFD	; 253
     ebc:	93 bf       	out	0x33, r25	; 51
    TCCR0 |= (u8)((u8)1<<CS02);
     ebe:	93 b7       	in	r25, 0x33	; 51
     ec0:	94 60       	ori	r25, 0x04	; 4
     ec2:	93 bf       	out	0x33, r25	; 51
    /*compare value*/
    OCR0=value;
     ec4:	8c bf       	out	0x3c, r24	; 60
    /*enable compare interrupt*/
    TIMSK |= (u8)((u8)1<<OCIE0);
     ec6:	89 b7       	in	r24, 0x39	; 57
     ec8:	82 60       	ori	r24, 0x02	; 2
     eca:	89 bf       	out	0x39, r24	; 57
     ecc:	08 95       	ret

00000ece <TimerOff>:



void TimerOff(void)
{
    TIMSK &= (u8)~((u8)((u8)1<<OCIE0));
     ece:	89 b7       	in	r24, 0x39	; 57
     ed0:	8d 7f       	andi	r24, 0xFD	; 253
     ed2:	89 bf       	out	0x39, r24	; 57
    TIMSK &= (u8)~((u8)((u8)1<<TOIE1));
     ed4:	89 b7       	in	r24, 0x39	; 57
     ed6:	8b 7f       	andi	r24, 0xFB	; 251
     ed8:	89 bf       	out	0x39, r24	; 57
    TIMSK &= (u8)~((u8)((u8)1<<TOIE2));
     eda:	89 b7       	in	r24, 0x39	; 57
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	89 bf       	out	0x39, r24	; 57
    TIMSK &= (u8)~((u8)((u8)1<<TOIE0));
     ee0:	89 b7       	in	r24, 0x39	; 57
     ee2:	8e 7f       	andi	r24, 0xFE	; 254
     ee4:	89 bf       	out	0x39, r24	; 57
    TIMSK &= (u8)~((u8)((u8)1<<TOIE1));
     ee6:	89 b7       	in	r24, 0x39	; 57
     ee8:	8b 7f       	andi	r24, 0xFB	; 251
     eea:	89 bf       	out	0x39, r24	; 57
    TIMSK &= (u8)~((u8)((u8)1<<TOIE2));
     eec:	89 b7       	in	r24, 0x39	; 57
     eee:	8f 7b       	andi	r24, 0xBF	; 191
     ef0:	89 bf       	out	0x39, r24	; 57
     ef2:	08 95       	ret

00000ef4 <__subsf3>:
     ef4:	50 58       	subi	r21, 0x80	; 128

00000ef6 <__addsf3>:
     ef6:	bb 27       	eor	r27, r27
     ef8:	aa 27       	eor	r26, r26
     efa:	0e 94 92 07 	call	0xf24	; 0xf24 <__addsf3x>
     efe:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_round>
     f02:	0e 94 ce 08 	call	0x119c	; 0x119c <__fp_pscA>
     f06:	38 f0       	brcs	.+14     	; 0xf16 <__addsf3+0x20>
     f08:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__fp_pscB>
     f0c:	20 f0       	brcs	.+8      	; 0xf16 <__addsf3+0x20>
     f0e:	39 f4       	brne	.+14     	; 0xf1e <__addsf3+0x28>
     f10:	9f 3f       	cpi	r25, 0xFF	; 255
     f12:	19 f4       	brne	.+6      	; 0xf1a <__addsf3+0x24>
     f14:	26 f4       	brtc	.+8      	; 0xf1e <__addsf3+0x28>
     f16:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_nan>
     f1a:	0e f4       	brtc	.+2      	; 0xf1e <__addsf3+0x28>
     f1c:	e0 95       	com	r30
     f1e:	e7 fb       	bst	r30, 7
     f20:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_inf>

00000f24 <__addsf3x>:
     f24:	e9 2f       	mov	r30, r25
     f26:	0e 94 ed 08 	call	0x11da	; 0x11da <__fp_split3>
     f2a:	58 f3       	brcs	.-42     	; 0xf02 <__addsf3+0xc>
     f2c:	ba 17       	cp	r27, r26
     f2e:	62 07       	cpc	r22, r18
     f30:	73 07       	cpc	r23, r19
     f32:	84 07       	cpc	r24, r20
     f34:	95 07       	cpc	r25, r21
     f36:	20 f0       	brcs	.+8      	; 0xf40 <__addsf3x+0x1c>
     f38:	79 f4       	brne	.+30     	; 0xf58 <__addsf3x+0x34>
     f3a:	a6 f5       	brtc	.+104    	; 0xfa4 <__addsf3x+0x80>
     f3c:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__fp_zero>
     f40:	0e f4       	brtc	.+2      	; 0xf44 <__addsf3x+0x20>
     f42:	e0 95       	com	r30
     f44:	0b 2e       	mov	r0, r27
     f46:	ba 2f       	mov	r27, r26
     f48:	a0 2d       	mov	r26, r0
     f4a:	0b 01       	movw	r0, r22
     f4c:	b9 01       	movw	r22, r18
     f4e:	90 01       	movw	r18, r0
     f50:	0c 01       	movw	r0, r24
     f52:	ca 01       	movw	r24, r20
     f54:	a0 01       	movw	r20, r0
     f56:	11 24       	eor	r1, r1
     f58:	ff 27       	eor	r31, r31
     f5a:	59 1b       	sub	r21, r25
     f5c:	99 f0       	breq	.+38     	; 0xf84 <__addsf3x+0x60>
     f5e:	59 3f       	cpi	r21, 0xF9	; 249
     f60:	50 f4       	brcc	.+20     	; 0xf76 <__addsf3x+0x52>
     f62:	50 3e       	cpi	r21, 0xE0	; 224
     f64:	68 f1       	brcs	.+90     	; 0xfc0 <__addsf3x+0x9c>
     f66:	1a 16       	cp	r1, r26
     f68:	f0 40       	sbci	r31, 0x00	; 0
     f6a:	a2 2f       	mov	r26, r18
     f6c:	23 2f       	mov	r18, r19
     f6e:	34 2f       	mov	r19, r20
     f70:	44 27       	eor	r20, r20
     f72:	58 5f       	subi	r21, 0xF8	; 248
     f74:	f3 cf       	rjmp	.-26     	; 0xf5c <__addsf3x+0x38>
     f76:	46 95       	lsr	r20
     f78:	37 95       	ror	r19
     f7a:	27 95       	ror	r18
     f7c:	a7 95       	ror	r26
     f7e:	f0 40       	sbci	r31, 0x00	; 0
     f80:	53 95       	inc	r21
     f82:	c9 f7       	brne	.-14     	; 0xf76 <__addsf3x+0x52>
     f84:	7e f4       	brtc	.+30     	; 0xfa4 <__addsf3x+0x80>
     f86:	1f 16       	cp	r1, r31
     f88:	ba 0b       	sbc	r27, r26
     f8a:	62 0b       	sbc	r22, r18
     f8c:	73 0b       	sbc	r23, r19
     f8e:	84 0b       	sbc	r24, r20
     f90:	ba f0       	brmi	.+46     	; 0xfc0 <__addsf3x+0x9c>
     f92:	91 50       	subi	r25, 0x01	; 1
     f94:	a1 f0       	breq	.+40     	; 0xfbe <__addsf3x+0x9a>
     f96:	ff 0f       	add	r31, r31
     f98:	bb 1f       	adc	r27, r27
     f9a:	66 1f       	adc	r22, r22
     f9c:	77 1f       	adc	r23, r23
     f9e:	88 1f       	adc	r24, r24
     fa0:	c2 f7       	brpl	.-16     	; 0xf92 <__addsf3x+0x6e>
     fa2:	0e c0       	rjmp	.+28     	; 0xfc0 <__addsf3x+0x9c>
     fa4:	ba 0f       	add	r27, r26
     fa6:	62 1f       	adc	r22, r18
     fa8:	73 1f       	adc	r23, r19
     faa:	84 1f       	adc	r24, r20
     fac:	48 f4       	brcc	.+18     	; 0xfc0 <__addsf3x+0x9c>
     fae:	87 95       	ror	r24
     fb0:	77 95       	ror	r23
     fb2:	67 95       	ror	r22
     fb4:	b7 95       	ror	r27
     fb6:	f7 95       	ror	r31
     fb8:	9e 3f       	cpi	r25, 0xFE	; 254
     fba:	08 f0       	brcs	.+2      	; 0xfbe <__addsf3x+0x9a>
     fbc:	b0 cf       	rjmp	.-160    	; 0xf1e <__addsf3+0x28>
     fbe:	93 95       	inc	r25
     fc0:	88 0f       	add	r24, r24
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <__addsf3x+0xa2>
     fc4:	99 27       	eor	r25, r25
     fc6:	ee 0f       	add	r30, r30
     fc8:	97 95       	ror	r25
     fca:	87 95       	ror	r24
     fcc:	08 95       	ret

00000fce <__divsf3>:
     fce:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divsf3x>
     fd2:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_round>
     fd6:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__fp_pscB>
     fda:	58 f0       	brcs	.+22     	; 0xff2 <__divsf3+0x24>
     fdc:	0e 94 ce 08 	call	0x119c	; 0x119c <__fp_pscA>
     fe0:	40 f0       	brcs	.+16     	; 0xff2 <__divsf3+0x24>
     fe2:	29 f4       	brne	.+10     	; 0xfee <__divsf3+0x20>
     fe4:	5f 3f       	cpi	r21, 0xFF	; 255
     fe6:	29 f0       	breq	.+10     	; 0xff2 <__divsf3+0x24>
     fe8:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_inf>
     fec:	51 11       	cpse	r21, r1
     fee:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__fp_szero>
     ff2:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_nan>

00000ff6 <__divsf3x>:
     ff6:	0e 94 ed 08 	call	0x11da	; 0x11da <__fp_split3>
     ffa:	68 f3       	brcs	.-38     	; 0xfd6 <__divsf3+0x8>

00000ffc <__divsf3_pse>:
     ffc:	99 23       	and	r25, r25
     ffe:	b1 f3       	breq	.-20     	; 0xfec <__divsf3+0x1e>
    1000:	55 23       	and	r21, r21
    1002:	91 f3       	breq	.-28     	; 0xfe8 <__divsf3+0x1a>
    1004:	95 1b       	sub	r25, r21
    1006:	55 0b       	sbc	r21, r21
    1008:	bb 27       	eor	r27, r27
    100a:	aa 27       	eor	r26, r26
    100c:	62 17       	cp	r22, r18
    100e:	73 07       	cpc	r23, r19
    1010:	84 07       	cpc	r24, r20
    1012:	38 f0       	brcs	.+14     	; 0x1022 <__divsf3_pse+0x26>
    1014:	9f 5f       	subi	r25, 0xFF	; 255
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	44 1f       	adc	r20, r20
    101e:	aa 1f       	adc	r26, r26
    1020:	a9 f3       	breq	.-22     	; 0x100c <__divsf3_pse+0x10>
    1022:	35 d0       	rcall	.+106    	; 0x108e <__divsf3_pse+0x92>
    1024:	0e 2e       	mov	r0, r30
    1026:	3a f0       	brmi	.+14     	; 0x1036 <__divsf3_pse+0x3a>
    1028:	e0 e8       	ldi	r30, 0x80	; 128
    102a:	32 d0       	rcall	.+100    	; 0x1090 <__divsf3_pse+0x94>
    102c:	91 50       	subi	r25, 0x01	; 1
    102e:	50 40       	sbci	r21, 0x00	; 0
    1030:	e6 95       	lsr	r30
    1032:	00 1c       	adc	r0, r0
    1034:	ca f7       	brpl	.-14     	; 0x1028 <__divsf3_pse+0x2c>
    1036:	2b d0       	rcall	.+86     	; 0x108e <__divsf3_pse+0x92>
    1038:	fe 2f       	mov	r31, r30
    103a:	29 d0       	rcall	.+82     	; 0x108e <__divsf3_pse+0x92>
    103c:	66 0f       	add	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	bb 1f       	adc	r27, r27
    1044:	26 17       	cp	r18, r22
    1046:	37 07       	cpc	r19, r23
    1048:	48 07       	cpc	r20, r24
    104a:	ab 07       	cpc	r26, r27
    104c:	b0 e8       	ldi	r27, 0x80	; 128
    104e:	09 f0       	breq	.+2      	; 0x1052 <__divsf3_pse+0x56>
    1050:	bb 0b       	sbc	r27, r27
    1052:	80 2d       	mov	r24, r0
    1054:	bf 01       	movw	r22, r30
    1056:	ff 27       	eor	r31, r31
    1058:	93 58       	subi	r25, 0x83	; 131
    105a:	5f 4f       	sbci	r21, 0xFF	; 255
    105c:	3a f0       	brmi	.+14     	; 0x106c <__divsf3_pse+0x70>
    105e:	9e 3f       	cpi	r25, 0xFE	; 254
    1060:	51 05       	cpc	r21, r1
    1062:	78 f0       	brcs	.+30     	; 0x1082 <__divsf3_pse+0x86>
    1064:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_inf>
    1068:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__fp_szero>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	e4 f3       	brlt	.-8      	; 0x1068 <__divsf3_pse+0x6c>
    1070:	98 3e       	cpi	r25, 0xE8	; 232
    1072:	d4 f3       	brlt	.-12     	; 0x1068 <__divsf3_pse+0x6c>
    1074:	86 95       	lsr	r24
    1076:	77 95       	ror	r23
    1078:	67 95       	ror	r22
    107a:	b7 95       	ror	r27
    107c:	f7 95       	ror	r31
    107e:	9f 5f       	subi	r25, 0xFF	; 255
    1080:	c9 f7       	brne	.-14     	; 0x1074 <__divsf3_pse+0x78>
    1082:	88 0f       	add	r24, r24
    1084:	91 1d       	adc	r25, r1
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	97 f9       	bld	r25, 7
    108c:	08 95       	ret
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	bb 1f       	adc	r27, r27
    1098:	62 17       	cp	r22, r18
    109a:	73 07       	cpc	r23, r19
    109c:	84 07       	cpc	r24, r20
    109e:	ba 07       	cpc	r27, r26
    10a0:	20 f0       	brcs	.+8      	; 0x10aa <__divsf3_pse+0xae>
    10a2:	62 1b       	sub	r22, r18
    10a4:	73 0b       	sbc	r23, r19
    10a6:	84 0b       	sbc	r24, r20
    10a8:	ba 0b       	sbc	r27, r26
    10aa:	ee 1f       	adc	r30, r30
    10ac:	88 f7       	brcc	.-30     	; 0x1090 <__divsf3_pse+0x94>
    10ae:	e0 95       	com	r30
    10b0:	08 95       	ret

000010b2 <__fixunssfsi>:
    10b2:	0e 94 f5 08 	call	0x11ea	; 0x11ea <__fp_splitA>
    10b6:	88 f0       	brcs	.+34     	; 0x10da <__fixunssfsi+0x28>
    10b8:	9f 57       	subi	r25, 0x7F	; 127
    10ba:	98 f0       	brcs	.+38     	; 0x10e2 <__fixunssfsi+0x30>
    10bc:	b9 2f       	mov	r27, r25
    10be:	99 27       	eor	r25, r25
    10c0:	b7 51       	subi	r27, 0x17	; 23
    10c2:	b0 f0       	brcs	.+44     	; 0x10f0 <__fixunssfsi+0x3e>
    10c4:	e1 f0       	breq	.+56     	; 0x10fe <__fixunssfsi+0x4c>
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	88 1f       	adc	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	1a f0       	brmi	.+6      	; 0x10d6 <__fixunssfsi+0x24>
    10d0:	ba 95       	dec	r27
    10d2:	c9 f7       	brne	.-14     	; 0x10c6 <__fixunssfsi+0x14>
    10d4:	14 c0       	rjmp	.+40     	; 0x10fe <__fixunssfsi+0x4c>
    10d6:	b1 30       	cpi	r27, 0x01	; 1
    10d8:	91 f0       	breq	.+36     	; 0x10fe <__fixunssfsi+0x4c>
    10da:	0e 94 0f 09 	call	0x121e	; 0x121e <__fp_zero>
    10de:	b1 e0       	ldi	r27, 0x01	; 1
    10e0:	08 95       	ret
    10e2:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__fp_zero>
    10e6:	67 2f       	mov	r22, r23
    10e8:	78 2f       	mov	r23, r24
    10ea:	88 27       	eor	r24, r24
    10ec:	b8 5f       	subi	r27, 0xF8	; 248
    10ee:	39 f0       	breq	.+14     	; 0x10fe <__fixunssfsi+0x4c>
    10f0:	b9 3f       	cpi	r27, 0xF9	; 249
    10f2:	cc f3       	brlt	.-14     	; 0x10e6 <__fixunssfsi+0x34>
    10f4:	86 95       	lsr	r24
    10f6:	77 95       	ror	r23
    10f8:	67 95       	ror	r22
    10fa:	b3 95       	inc	r27
    10fc:	d9 f7       	brne	.-10     	; 0x10f4 <__fixunssfsi+0x42>
    10fe:	3e f4       	brtc	.+14     	; 0x110e <__fixunssfsi+0x5c>
    1100:	90 95       	com	r25
    1102:	80 95       	com	r24
    1104:	70 95       	com	r23
    1106:	61 95       	neg	r22
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	08 95       	ret

00001110 <__floatunsisf>:
    1110:	e8 94       	clt
    1112:	09 c0       	rjmp	.+18     	; 0x1126 <__floatsisf+0x12>

00001114 <__floatsisf>:
    1114:	97 fb       	bst	r25, 7
    1116:	3e f4       	brtc	.+14     	; 0x1126 <__floatsisf+0x12>
    1118:	90 95       	com	r25
    111a:	80 95       	com	r24
    111c:	70 95       	com	r23
    111e:	61 95       	neg	r22
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	8f 4f       	sbci	r24, 0xFF	; 255
    1124:	9f 4f       	sbci	r25, 0xFF	; 255
    1126:	99 23       	and	r25, r25
    1128:	a9 f0       	breq	.+42     	; 0x1154 <__floatsisf+0x40>
    112a:	f9 2f       	mov	r31, r25
    112c:	96 e9       	ldi	r25, 0x96	; 150
    112e:	bb 27       	eor	r27, r27
    1130:	93 95       	inc	r25
    1132:	f6 95       	lsr	r31
    1134:	87 95       	ror	r24
    1136:	77 95       	ror	r23
    1138:	67 95       	ror	r22
    113a:	b7 95       	ror	r27
    113c:	f1 11       	cpse	r31, r1
    113e:	f8 cf       	rjmp	.-16     	; 0x1130 <__floatsisf+0x1c>
    1140:	fa f4       	brpl	.+62     	; 0x1180 <__floatsisf+0x6c>
    1142:	bb 0f       	add	r27, r27
    1144:	11 f4       	brne	.+4      	; 0x114a <__floatsisf+0x36>
    1146:	60 ff       	sbrs	r22, 0
    1148:	1b c0       	rjmp	.+54     	; 0x1180 <__floatsisf+0x6c>
    114a:	6f 5f       	subi	r22, 0xFF	; 255
    114c:	7f 4f       	sbci	r23, 0xFF	; 255
    114e:	8f 4f       	sbci	r24, 0xFF	; 255
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	16 c0       	rjmp	.+44     	; 0x1180 <__floatsisf+0x6c>
    1154:	88 23       	and	r24, r24
    1156:	11 f0       	breq	.+4      	; 0x115c <__floatsisf+0x48>
    1158:	96 e9       	ldi	r25, 0x96	; 150
    115a:	11 c0       	rjmp	.+34     	; 0x117e <__floatsisf+0x6a>
    115c:	77 23       	and	r23, r23
    115e:	21 f0       	breq	.+8      	; 0x1168 <__floatsisf+0x54>
    1160:	9e e8       	ldi	r25, 0x8E	; 142
    1162:	87 2f       	mov	r24, r23
    1164:	76 2f       	mov	r23, r22
    1166:	05 c0       	rjmp	.+10     	; 0x1172 <__floatsisf+0x5e>
    1168:	66 23       	and	r22, r22
    116a:	71 f0       	breq	.+28     	; 0x1188 <__floatsisf+0x74>
    116c:	96 e8       	ldi	r25, 0x86	; 134
    116e:	86 2f       	mov	r24, r22
    1170:	70 e0       	ldi	r23, 0x00	; 0
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	2a f0       	brmi	.+10     	; 0x1180 <__floatsisf+0x6c>
    1176:	9a 95       	dec	r25
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	88 1f       	adc	r24, r24
    117e:	da f7       	brpl	.-10     	; 0x1176 <__floatsisf+0x62>
    1180:	88 0f       	add	r24, r24
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	97 f9       	bld	r25, 7
    1188:	08 95       	ret

0000118a <__fp_inf>:
    118a:	97 f9       	bld	r25, 7
    118c:	9f 67       	ori	r25, 0x7F	; 127
    118e:	80 e8       	ldi	r24, 0x80	; 128
    1190:	70 e0       	ldi	r23, 0x00	; 0
    1192:	60 e0       	ldi	r22, 0x00	; 0
    1194:	08 95       	ret

00001196 <__fp_nan>:
    1196:	9f ef       	ldi	r25, 0xFF	; 255
    1198:	80 ec       	ldi	r24, 0xC0	; 192
    119a:	08 95       	ret

0000119c <__fp_pscA>:
    119c:	00 24       	eor	r0, r0
    119e:	0a 94       	dec	r0
    11a0:	16 16       	cp	r1, r22
    11a2:	17 06       	cpc	r1, r23
    11a4:	18 06       	cpc	r1, r24
    11a6:	09 06       	cpc	r0, r25
    11a8:	08 95       	ret

000011aa <__fp_pscB>:
    11aa:	00 24       	eor	r0, r0
    11ac:	0a 94       	dec	r0
    11ae:	12 16       	cp	r1, r18
    11b0:	13 06       	cpc	r1, r19
    11b2:	14 06       	cpc	r1, r20
    11b4:	05 06       	cpc	r0, r21
    11b6:	08 95       	ret

000011b8 <__fp_round>:
    11b8:	09 2e       	mov	r0, r25
    11ba:	03 94       	inc	r0
    11bc:	00 0c       	add	r0, r0
    11be:	11 f4       	brne	.+4      	; 0x11c4 <__fp_round+0xc>
    11c0:	88 23       	and	r24, r24
    11c2:	52 f0       	brmi	.+20     	; 0x11d8 <__fp_round+0x20>
    11c4:	bb 0f       	add	r27, r27
    11c6:	40 f4       	brcc	.+16     	; 0x11d8 <__fp_round+0x20>
    11c8:	bf 2b       	or	r27, r31
    11ca:	11 f4       	brne	.+4      	; 0x11d0 <__fp_round+0x18>
    11cc:	60 ff       	sbrs	r22, 0
    11ce:	04 c0       	rjmp	.+8      	; 0x11d8 <__fp_round+0x20>
    11d0:	6f 5f       	subi	r22, 0xFF	; 255
    11d2:	7f 4f       	sbci	r23, 0xFF	; 255
    11d4:	8f 4f       	sbci	r24, 0xFF	; 255
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	08 95       	ret

000011da <__fp_split3>:
    11da:	57 fd       	sbrc	r21, 7
    11dc:	90 58       	subi	r25, 0x80	; 128
    11de:	44 0f       	add	r20, r20
    11e0:	55 1f       	adc	r21, r21
    11e2:	59 f0       	breq	.+22     	; 0x11fa <__fp_splitA+0x10>
    11e4:	5f 3f       	cpi	r21, 0xFF	; 255
    11e6:	71 f0       	breq	.+28     	; 0x1204 <__fp_splitA+0x1a>
    11e8:	47 95       	ror	r20

000011ea <__fp_splitA>:
    11ea:	88 0f       	add	r24, r24
    11ec:	97 fb       	bst	r25, 7
    11ee:	99 1f       	adc	r25, r25
    11f0:	61 f0       	breq	.+24     	; 0x120a <__fp_splitA+0x20>
    11f2:	9f 3f       	cpi	r25, 0xFF	; 255
    11f4:	79 f0       	breq	.+30     	; 0x1214 <__fp_splitA+0x2a>
    11f6:	87 95       	ror	r24
    11f8:	08 95       	ret
    11fa:	12 16       	cp	r1, r18
    11fc:	13 06       	cpc	r1, r19
    11fe:	14 06       	cpc	r1, r20
    1200:	55 1f       	adc	r21, r21
    1202:	f2 cf       	rjmp	.-28     	; 0x11e8 <__fp_split3+0xe>
    1204:	46 95       	lsr	r20
    1206:	f1 df       	rcall	.-30     	; 0x11ea <__fp_splitA>
    1208:	08 c0       	rjmp	.+16     	; 0x121a <__fp_splitA+0x30>
    120a:	16 16       	cp	r1, r22
    120c:	17 06       	cpc	r1, r23
    120e:	18 06       	cpc	r1, r24
    1210:	99 1f       	adc	r25, r25
    1212:	f1 cf       	rjmp	.-30     	; 0x11f6 <__fp_splitA+0xc>
    1214:	86 95       	lsr	r24
    1216:	71 05       	cpc	r23, r1
    1218:	61 05       	cpc	r22, r1
    121a:	08 94       	sec
    121c:	08 95       	ret

0000121e <__fp_zero>:
    121e:	e8 94       	clt

00001220 <__fp_szero>:
    1220:	bb 27       	eor	r27, r27
    1222:	66 27       	eor	r22, r22
    1224:	77 27       	eor	r23, r23
    1226:	cb 01       	movw	r24, r22
    1228:	97 f9       	bld	r25, 7
    122a:	08 95       	ret

0000122c <__gesf2>:
    122c:	0e 94 88 09 	call	0x1310	; 0x1310 <__fp_cmp>
    1230:	08 f4       	brcc	.+2      	; 0x1234 <__gesf2+0x8>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	08 95       	ret

00001236 <__mulsf3>:
    1236:	0e 94 2e 09 	call	0x125c	; 0x125c <__mulsf3x>
    123a:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__fp_round>
    123e:	0e 94 ce 08 	call	0x119c	; 0x119c <__fp_pscA>
    1242:	38 f0       	brcs	.+14     	; 0x1252 <__mulsf3+0x1c>
    1244:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__fp_pscB>
    1248:	20 f0       	brcs	.+8      	; 0x1252 <__mulsf3+0x1c>
    124a:	95 23       	and	r25, r21
    124c:	11 f0       	breq	.+4      	; 0x1252 <__mulsf3+0x1c>
    124e:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_inf>
    1252:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__fp_nan>
    1256:	11 24       	eor	r1, r1
    1258:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__fp_szero>

0000125c <__mulsf3x>:
    125c:	0e 94 ed 08 	call	0x11da	; 0x11da <__fp_split3>
    1260:	70 f3       	brcs	.-36     	; 0x123e <__mulsf3+0x8>

00001262 <__mulsf3_pse>:
    1262:	95 9f       	mul	r25, r21
    1264:	c1 f3       	breq	.-16     	; 0x1256 <__mulsf3+0x20>
    1266:	95 0f       	add	r25, r21
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	55 1f       	adc	r21, r21
    126c:	62 9f       	mul	r22, r18
    126e:	f0 01       	movw	r30, r0
    1270:	72 9f       	mul	r23, r18
    1272:	bb 27       	eor	r27, r27
    1274:	f0 0d       	add	r31, r0
    1276:	b1 1d       	adc	r27, r1
    1278:	63 9f       	mul	r22, r19
    127a:	aa 27       	eor	r26, r26
    127c:	f0 0d       	add	r31, r0
    127e:	b1 1d       	adc	r27, r1
    1280:	aa 1f       	adc	r26, r26
    1282:	64 9f       	mul	r22, r20
    1284:	66 27       	eor	r22, r22
    1286:	b0 0d       	add	r27, r0
    1288:	a1 1d       	adc	r26, r1
    128a:	66 1f       	adc	r22, r22
    128c:	82 9f       	mul	r24, r18
    128e:	22 27       	eor	r18, r18
    1290:	b0 0d       	add	r27, r0
    1292:	a1 1d       	adc	r26, r1
    1294:	62 1f       	adc	r22, r18
    1296:	73 9f       	mul	r23, r19
    1298:	b0 0d       	add	r27, r0
    129a:	a1 1d       	adc	r26, r1
    129c:	62 1f       	adc	r22, r18
    129e:	83 9f       	mul	r24, r19
    12a0:	a0 0d       	add	r26, r0
    12a2:	61 1d       	adc	r22, r1
    12a4:	22 1f       	adc	r18, r18
    12a6:	74 9f       	mul	r23, r20
    12a8:	33 27       	eor	r19, r19
    12aa:	a0 0d       	add	r26, r0
    12ac:	61 1d       	adc	r22, r1
    12ae:	23 1f       	adc	r18, r19
    12b0:	84 9f       	mul	r24, r20
    12b2:	60 0d       	add	r22, r0
    12b4:	21 1d       	adc	r18, r1
    12b6:	82 2f       	mov	r24, r18
    12b8:	76 2f       	mov	r23, r22
    12ba:	6a 2f       	mov	r22, r26
    12bc:	11 24       	eor	r1, r1
    12be:	9f 57       	subi	r25, 0x7F	; 127
    12c0:	50 40       	sbci	r21, 0x00	; 0
    12c2:	9a f0       	brmi	.+38     	; 0x12ea <__mulsf3_pse+0x88>
    12c4:	f1 f0       	breq	.+60     	; 0x1302 <__mulsf3_pse+0xa0>
    12c6:	88 23       	and	r24, r24
    12c8:	4a f0       	brmi	.+18     	; 0x12dc <__mulsf3_pse+0x7a>
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	bb 1f       	adc	r27, r27
    12d0:	66 1f       	adc	r22, r22
    12d2:	77 1f       	adc	r23, r23
    12d4:	88 1f       	adc	r24, r24
    12d6:	91 50       	subi	r25, 0x01	; 1
    12d8:	50 40       	sbci	r21, 0x00	; 0
    12da:	a9 f7       	brne	.-22     	; 0x12c6 <__mulsf3_pse+0x64>
    12dc:	9e 3f       	cpi	r25, 0xFE	; 254
    12de:	51 05       	cpc	r21, r1
    12e0:	80 f0       	brcs	.+32     	; 0x1302 <__mulsf3_pse+0xa0>
    12e2:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__fp_inf>
    12e6:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__fp_szero>
    12ea:	5f 3f       	cpi	r21, 0xFF	; 255
    12ec:	e4 f3       	brlt	.-8      	; 0x12e6 <__mulsf3_pse+0x84>
    12ee:	98 3e       	cpi	r25, 0xE8	; 232
    12f0:	d4 f3       	brlt	.-12     	; 0x12e6 <__mulsf3_pse+0x84>
    12f2:	86 95       	lsr	r24
    12f4:	77 95       	ror	r23
    12f6:	67 95       	ror	r22
    12f8:	b7 95       	ror	r27
    12fa:	f7 95       	ror	r31
    12fc:	e7 95       	ror	r30
    12fe:	9f 5f       	subi	r25, 0xFF	; 255
    1300:	c1 f7       	brne	.-16     	; 0x12f2 <__mulsf3_pse+0x90>
    1302:	fe 2b       	or	r31, r30
    1304:	88 0f       	add	r24, r24
    1306:	91 1d       	adc	r25, r1
    1308:	96 95       	lsr	r25
    130a:	87 95       	ror	r24
    130c:	97 f9       	bld	r25, 7
    130e:	08 95       	ret

00001310 <__fp_cmp>:
    1310:	99 0f       	add	r25, r25
    1312:	00 08       	sbc	r0, r0
    1314:	55 0f       	add	r21, r21
    1316:	aa 0b       	sbc	r26, r26
    1318:	e0 e8       	ldi	r30, 0x80	; 128
    131a:	fe ef       	ldi	r31, 0xFE	; 254
    131c:	16 16       	cp	r1, r22
    131e:	17 06       	cpc	r1, r23
    1320:	e8 07       	cpc	r30, r24
    1322:	f9 07       	cpc	r31, r25
    1324:	c0 f0       	brcs	.+48     	; 0x1356 <__fp_cmp+0x46>
    1326:	12 16       	cp	r1, r18
    1328:	13 06       	cpc	r1, r19
    132a:	e4 07       	cpc	r30, r20
    132c:	f5 07       	cpc	r31, r21
    132e:	98 f0       	brcs	.+38     	; 0x1356 <__fp_cmp+0x46>
    1330:	62 1b       	sub	r22, r18
    1332:	73 0b       	sbc	r23, r19
    1334:	84 0b       	sbc	r24, r20
    1336:	95 0b       	sbc	r25, r21
    1338:	39 f4       	brne	.+14     	; 0x1348 <__fp_cmp+0x38>
    133a:	0a 26       	eor	r0, r26
    133c:	61 f0       	breq	.+24     	; 0x1356 <__fp_cmp+0x46>
    133e:	23 2b       	or	r18, r19
    1340:	24 2b       	or	r18, r20
    1342:	25 2b       	or	r18, r21
    1344:	21 f4       	brne	.+8      	; 0x134e <__fp_cmp+0x3e>
    1346:	08 95       	ret
    1348:	0a 26       	eor	r0, r26
    134a:	09 f4       	brne	.+2      	; 0x134e <__fp_cmp+0x3e>
    134c:	a1 40       	sbci	r26, 0x01	; 1
    134e:	a6 95       	lsr	r26
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	81 1d       	adc	r24, r1
    1354:	81 1d       	adc	r24, r1
    1356:	08 95       	ret

00001358 <_exit>:
    1358:	f8 94       	cli

0000135a <__stop_program>:
    135a:	ff cf       	rjmp	.-2      	; 0x135a <__stop_program>
